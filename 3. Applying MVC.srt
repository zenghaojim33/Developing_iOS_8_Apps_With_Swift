1
00:00:00,001 --> 00:00:04,636
            [MUSIC]             

2
00:00:04,638 --> 00:00:07,171
      Stanford University.      

3
00:00:07,173 --> 00:00:09,807
         [BLANK_AUDIO]          

4
00:00:09,809 --> 00:00:13,343
    >> Okay, well welcome to    
      CS193p, Winter 2015.      

5
00:00:13,345 --> 00:00:15,445
       This is Lecture 3.       

6
00:00:15,447 --> 00:00:17,714
   This is gonna be all demo.   

7
00:00:17,716 --> 00:00:21,283
   today, my voice is mostly    
   recovered from last week,    

8
00:00:21,285 --> 00:00:22,918
   not 100% as you can tell.    

9
00:00:22,920 --> 00:00:23,985
    But it's getting there.     

10
00:00:25,455 --> 00:00:29,924
  So what we're gonna be doing  
        today is a demo.        

11
00:00:29,926 --> 00:00:31,825
     We're gonna extend our     
    calculator a little bit,    

12
00:00:31,827 --> 00:00:33,460
    we're gonna make it more    
           powerful.            

13
00:00:33,462 --> 00:00:36,629
  But more importantly, we're   
  gonna have it obey this MVC   

14
00:00:36,631 --> 00:00:37,930
        design paradigm.        

15
00:00:37,932 --> 00:00:39,682
             'Kay?              

16
00:00:39,683 --> 00:00:41,433
  So it's good, a pretty good   
     example of showing how     

17
00:00:41,436 --> 00:00:44,670
 we're gonna separate the stuff 
      into the camps here.      

18
00:00:44,672 --> 00:00:46,138
 Now, we're gonna cover a bunch 
        of other things,        

19
00:00:46,140 --> 00:00:48,473
 language features and stuff as 
          I always do.          

20
00:00:48,475 --> 00:00:52,143
 That's really the primary goal 
 of these first three lectures  

21
00:00:52,145 --> 00:00:54,078
         with the demo.         

22
00:00:54,079 --> 00:00:56,012
 So I just mean for you to see  
  it in action because you can  

23
00:00:56,015 --> 00:00:59,750
 read all you want about swift  
  or, about iOS, but until you  

24
00:00:59,752 --> 00:01:02,619
  actually see it act, turning  
  into an app, it's not real.   

25
00:01:02,621 --> 00:01:04,420
 So I'm just trying to make it  
         real for you.          

26
00:01:06,057 --> 00:01:08,590
   I'm going to go to my last   
        slide, because,         

27
00:01:08,592 --> 00:01:11,093
  once I go to the demo, I'll   
      forget to come back.      

28
00:01:11,095 --> 00:01:13,895
    Which is just the what's    
    coming up in this class.    

29
00:01:13,897 --> 00:01:17,031
 On Wednesday, it's gonna be no 
    demo, it's gonna be all     

30
00:01:17,033 --> 00:01:19,967
  slides, it's going to be one  
 of the few lectures where it's 

31
00:01:19,969 --> 00:01:21,185
          all slides.           

32
00:01:21,186 --> 00:01:22,402
 But what I'm gonna try to do,  

33
00:01:22,405 --> 00:01:25,205
 on Wednesday, is give you the  
     highlights of this all     

34
00:01:25,207 --> 00:01:27,307
    this reading that you're    
             doing.             

35
00:01:27,309 --> 00:01:28,658
             Okay?              
         Because you're         

36
00:01:28,659 --> 00:01:30,008
   reading a lot of stuff and   
     it's sometimes hard to     

37
00:01:30,011 --> 00:01:32,611
  tell what's really important  
    in there and what's not.    

38
00:01:32,613 --> 00:01:34,279
  So I'm gonna kinda give you   
       the highlights so        

39
00:01:34,281 --> 00:01:36,448
 you can get an idea of what's  
           important.           

40
00:01:36,450 --> 00:01:40,618
 And then I'm also gonna start  
     talking about some of      

41
00:01:40,620 --> 00:01:45,255
  the foundation layer API in   
    IOS that's the non you,     

42
00:01:45,257 --> 00:01:47,891
 user interface layer basically 
              and               

43
00:01:47,893 --> 00:01:51,227
 kinda what some of the classes 
         are in there.          

44
00:01:51,229 --> 00:01:54,130
  And then also just a little   
 bit of how we use the language 

45
00:01:54,132 --> 00:01:57,099
     features of swift, and     
     foundation, in iOS so      

46
00:01:57,101 --> 00:02:00,169
  that you can kinda get this   
    kind of your, this want,    

47
00:02:00,171 --> 00:02:01,870
  next Wednesday's lecture is,  

48
00:02:01,872 --> 00:02:03,772
   is gonna be your baseline    
            lecture,            

49
00:02:03,774 --> 00:02:07,241
 can kinda get you grounded in  
   how to do all this stuff.    

50
00:02:07,243 --> 00:02:10,044
 And then next week we'll start 
           diving in,           

51
00:02:10,046 --> 00:02:13,814
 to build a more sophisticated  
        iOS application.        

52
00:02:13,816 --> 00:02:15,682
 Okay, I know this is kind of a 
   new whirlwind in first two   

53
00:02:15,684 --> 00:02:18,752
  weeks, you're learning a new  
   language, all new system.    

54
00:02:18,754 --> 00:02:20,920
  But hopefully by the end of   
 this week and the end of your  

55
00:02:20,922 --> 00:02:24,757
  second assignment which will  
 go out on Wednesday you'll be  

56
00:02:24,759 --> 00:02:26,225
  pretty confident that you'll  
           at least,            

57
00:02:26,227 --> 00:02:30,595
 you know, have a, solid ground 
   foundation to build from,    

58
00:02:30,597 --> 00:02:31,662
     no pun intended there.     

59
00:02:33,032 --> 00:02:36,767
 There's a holiday weekend this 
 weekend no Friday section and  

60
00:02:36,769 --> 00:02:39,603
  no class on Monday until we   
   resume next Wednesday, and   

61
00:02:39,605 --> 00:02:42,305
 the primary thing I'm gonna do 
        next Wednesday,         

62
00:02:42,307 --> 00:02:44,341
   not day after tomorrow but   

63
00:02:44,342 --> 00:02:46,376
 the next Wednesday, is talk a  
 little more about auto layout. 

64
00:02:46,378 --> 00:02:49,445
  Cause you've only just seen   
   kind of a glimpse of auto    

65
00:02:49,447 --> 00:02:51,013
       layouts so far and       

66
00:02:51,015 --> 00:02:53,849
 I haven't even really told you 
  how to do auto layout and so  

67
00:02:53,851 --> 00:02:55,383
   you're kinda just fumbling   
       around and trying,       

68
00:02:55,385 --> 00:02:58,619
 trying to reproduce what I do  
    so next Wednesday we'll     

69
00:02:58,621 --> 00:03:01,588
  talk about how to really do   
 auto layout hm, and all that.  

70
00:03:02,825 --> 00:03:05,225
  'Kay, any questions before I  
      dive into this demo?      

71
00:03:06,194 --> 00:03:10,396
  Hopefully my voice will hold  
   out I can already hear it    

72
00:03:10,398 --> 00:03:14,065
  starting to not hold out but  
          we will see.          

73
00:03:14,067 --> 00:03:15,266
           All right.           

74
00:03:15,268 --> 00:03:21,839
  So, I'm going to just go to   
   Xcode here, launch Xcode.    

75
00:03:22,941 --> 00:03:25,942
   And we're gonna leave off    
     right where we, were,      

76
00:03:25,944 --> 00:03:27,410
 last time, in the calculator.  

77
00:03:28,846 --> 00:03:32,681
 There it is right here, and so 
         these are UI.          

78
00:03:32,683 --> 00:03:34,783
  Hopefully you recognize that  
          and you did,          

79
00:03:34,785 --> 00:03:36,051
       did your homework.       

80
00:03:36,053 --> 00:03:38,070
            I hope.             

81
00:03:38,071 --> 00:03:40,088
  And here is this area that I  
      selected at the end,      

82
00:03:40,090 --> 00:03:43,290
   which is this area that's    
        really has not,         

83
00:03:43,292 --> 00:03:47,928
 this is not about how, how the 
  calculator gets presented on  

84
00:03:47,930 --> 00:03:51,064
   screen, this blue area is    
  about how the calculator is   

85
00:03:51,066 --> 00:03:52,165
      a calculator, okay?       

86
00:03:52,167 --> 00:03:54,367
     This is where all our      
      calculations are and      

87
00:03:54,369 --> 00:03:57,302
     this blue area really      
  shouldn't be in this class,   

88
00:03:57,304 --> 00:04:00,839
   this view controller class   
     because this is the C      

89
00:04:00,841 --> 00:04:01,973
       of our MVC, okay.        

90
00:04:01,975 --> 00:04:06,910
  And our MVC, this is the C,   
    this is the V, the view,    

91
00:04:06,912 --> 00:04:09,546
   these are the minions that   
    this controller's using.    

92
00:04:09,548 --> 00:04:11,948
  And today we're gonna create  
             the M.             

93
00:04:11,950 --> 00:04:13,349
             Okay?              
           The model.           

94
00:04:13,351 --> 00:04:15,351
 The model is gonna be what our 
             calcu,             

95
00:04:15,353 --> 00:04:18,854
 what our application is, which 
     is, it's a calculator.     

96
00:04:18,856 --> 00:04:20,155
             'Kay?              

97
00:04:20,157 --> 00:04:23,758
  We're also going to enhance   
 our calculator the primary new 

98
00:04:23,760 --> 00:04:26,360
  feature we're gonna give our  
       calculator is that       

99
00:04:26,362 --> 00:04:30,030
 our calculators model is gonna 
   remember every operand and   

100
00:04:30,032 --> 00:04:32,833
 operation you ever asked it to 
              do.               

101
00:04:32,835 --> 00:04:38,271
  Okay, so right now as we do   
   operations we consume all    

102
00:04:38,273 --> 00:04:39,505
         the operands.          

103
00:04:39,507 --> 00:04:41,040
   'Kay, they consume, kinda,   
         they're gone.          

104
00:04:42,276 --> 00:04:43,792
        So in this case,        

105
00:04:43,793 --> 00:04:45,309
    we're going to actually     
 collect all the operations and 

106
00:04:45,312 --> 00:04:48,346
  operands in our, in a stack   
        and then we can         

107
00:04:48,348 --> 00:04:53,350
   ask the model to, evaluate   
  that stack of operations and  

108
00:04:53,352 --> 00:04:55,385
 operands at any time we want.  

109
00:04:55,387 --> 00:04:57,654
  And the reason we're adding   
  that ability is because your  

110
00:04:57,656 --> 00:05:00,256
  homework, assignment number   
   two, you're gonna add two    

111
00:05:00,258 --> 00:05:03,726
  major features where having   
    all the operands and the    

112
00:05:03,728 --> 00:05:06,628
 operations in a stack is gonna 
   be really valuable to you.   

113
00:05:06,630 --> 00:05:09,264
   So you'll be starting your   
  second homework with what I   

114
00:05:09,266 --> 00:05:12,334
   do today cause you'll need   
  this capability to do what I  

115
00:05:12,336 --> 00:05:13,735
         ask you there.         

116
00:05:13,737 --> 00:05:14,902
 Okay, and I'll talk about that 
          at the end.           

117
00:05:14,904 --> 00:05:17,237
   If I forget to talk about    
        that, remind me.        

118
00:05:17,239 --> 00:05:18,805
 Say, tell us about assignment  
              two.              

119
00:05:20,175 --> 00:05:21,240
             Okay.              

120
00:05:21,242 --> 00:05:22,908
   So, how do we create a new   
             class.             

121
00:05:22,910 --> 00:05:25,911
  Because we're gonna put our   
  model, 'kay, the calculator,  

122
00:05:25,913 --> 00:05:28,680
 kind of, it, it's the guts, in 
       a different class.       

123
00:05:28,682 --> 00:05:31,983
   So how do we create a new    
        class, in Xcode.        

124
00:05:31,985 --> 00:05:33,651
  We do that up here from the   
           File menu.           

125
00:05:33,653 --> 00:05:35,619
       We go, New > File.       

126
00:05:35,621 --> 00:05:38,489
 So, you're gonna do File menu  
   > New > File for a lot of    

127
00:05:38,491 --> 00:05:41,291
 different things you're gonna  
      add to your project.      

128
00:05:41,293 --> 00:05:43,693
 Not even just, new classes or  

129
00:05:43,695 --> 00:05:46,863
 whatever, but, when you click  
     that you're gonna see      

130
00:05:46,865 --> 00:05:48,497
   there's a lot of different   
     things you could add.      

131
00:05:48,499 --> 00:05:49,865
     And, we're in iOS, so      

132
00:05:49,867 --> 00:05:52,267
 you're gonna click on this iOS 
       thing at the top.        

133
00:05:52,269 --> 00:05:53,635
   And we wanna add a source    
             file.              

134
00:05:53,637 --> 00:05:56,671
  And over here we're gonna be  
      doing this later in       

135
00:05:56,673 --> 00:06:00,941
  the quarter, this is how we   
  basically add subclasses of   

136
00:06:00,943 --> 00:06:04,378
  iOS classes, Co, Cocoa Touch  
            classes.            

137
00:06:04,380 --> 00:06:06,446
 But we're gonna do today this  
        one Swift File,         

138
00:06:06,448 --> 00:06:08,948
   you can see it's an empty    
          Swift File.           

139
00:06:08,950 --> 00:06:11,517
     And since our model is     
  completely UI independent it  

140
00:06:11,519 --> 00:06:15,287
  doesn't inherit, it doesn't   
   subclass any IOS class or    

141
00:06:15,289 --> 00:06:17,923
  anything, it's just a basic,  
          Swift File.           

142
00:06:17,925 --> 00:06:19,824
   So I'm gonna pick on this    
          Swift File,           

143
00:06:19,826 --> 00:06:23,394
  click Next, and now it wants  
      to know the name of       

144
00:06:23,396 --> 00:06:26,564
 it and where we wanna put it,  
   and we're gonna put it in    

145
00:06:26,566 --> 00:06:29,466
  the same place that all our   
     other swift files are.     

146
00:06:29,468 --> 00:06:30,901
   Here's our Controller and    

147
00:06:30,902 --> 00:06:32,335
 this AppDelegate, we moved it  
   out of the way at the very   

148
00:06:32,338 --> 00:06:34,571
  beginning of the very first   
 lecture but it's in there too. 

149
00:06:34,573 --> 00:06:36,439
  So we want to put it in this  
        same directory.         

150
00:06:36,441 --> 00:06:41,910
 And we're gonna call this new  
     class CalculatorBrain.     

151
00:06:41,912 --> 00:06:43,645
  Now, you don't have to have   
          the name of           

152
00:06:43,647 --> 00:06:47,048
  this Swift File here be the   
 name of the primary class but  

153
00:06:47,050 --> 00:06:48,049
       we always do that.       

154
00:06:48,051 --> 00:06:49,617
 It would be kinda confusing to 

155
00:06:49,619 --> 00:06:52,019
   people a little bit if the   
     name of the Swift File     

156
00:06:52,021 --> 00:06:54,554
  was different than whatever   
 the primary class is in there. 

157
00:06:54,556 --> 00:06:55,755
   But it's certainly legal.    

158
00:06:55,757 --> 00:06:56,422
           All right.           

159
00:06:56,424 --> 00:06:57,556
     And Swift, the name of     

160
00:06:57,558 --> 00:06:58,857
  the file really doesn't mean  
           anything.            

161
00:06:58,859 --> 00:07:00,359
    It's what's inside that     
            matters.            

162
00:07:00,361 --> 00:07:03,461
 But, CalculatorBrain is gonna  
   be the name of our class,    

163
00:07:03,463 --> 00:07:04,929
           our model.           

164
00:07:04,930 --> 00:07:06,396
 I'm calling it that cause it's 
  the brain of our calculator,  

165
00:07:06,399 --> 00:07:07,898
      I'm trying to pick a      
       descriptive name.        

166
00:07:09,201 --> 00:07:12,302
   Notice the capitalization    
             here,              

167
00:07:12,304 --> 00:07:16,306
   types in swift, we always    
        capitalize them.        

168
00:07:16,308 --> 00:07:19,409
  And we do not put underbars   
   and other stuff in there.    

169
00:07:19,411 --> 00:07:20,609
             Okay?              
   We use what's called this    

170
00:07:20,611 --> 00:07:25,380
   camel notation here, where   
  every word gets capitalized,  

171
00:07:25,382 --> 00:07:27,882
 including the first name, word 
           for types.           

172
00:07:27,884 --> 00:07:31,219
   Everything else, we don't    
          capitalize.           

173
00:07:31,221 --> 00:07:34,755
  So property names and things  
   like that, function names,   

174
00:07:34,757 --> 00:07:36,457
   those all start with lower   
             case,              

175
00:07:36,459 --> 00:07:38,992
  they still do the uppercase   
      and the other words.      

176
00:07:38,994 --> 00:07:40,427
  That way we, in our reading   
          our code we           

177
00:07:40,429 --> 00:07:43,196
  can really quickly pick out   
 what to type and what to not.  

178
00:07:43,198 --> 00:07:45,164
             'Kay?              
   So please adhere to that.    

179
00:07:45,166 --> 00:07:48,334
   If you don't, you're gonna   
  look like a newb out there.   

180
00:07:48,336 --> 00:07:49,501
             'Kay.              
  Calculator brains what we're  

181
00:07:49,503 --> 00:07:50,835
    gonna call it, I'm gonna    
           create it.           

182
00:07:51,938 --> 00:07:53,121
     Here it is right here.     

183
00:07:53,122 --> 00:07:54,305
   I'm gonna make it my whole   
            screen.             

184
00:07:55,541 --> 00:07:58,975
  You can see that the import   
   here is not import UI kit,   

185
00:07:58,977 --> 00:08:00,477
    it's import Foundation.     

186
00:08:00,479 --> 00:08:03,379
 Foundation is that layer, that 
  kinda core services layer I   

187
00:08:03,381 --> 00:08:05,581
   talked about in the first    
            lecture.            

188
00:08:05,583 --> 00:08:07,883
 It don't have many UI stuff in 
  it which is good because our  

189
00:08:07,885 --> 00:08:11,687
   model is UI independent so   
 there should be no UI in here. 

190
00:08:11,689 --> 00:08:15,957
 So we would never be importing 
   UI kit into a model class,   

191
00:08:15,959 --> 00:08:17,392
             'kay?              

192
00:08:17,393 --> 00:08:18,826
 You can feel free to stop me,  
          by the way,           

193
00:08:18,828 --> 00:08:19,793
   if you have any questions.   

194
00:08:19,795 --> 00:08:22,095
   All right, so we're gonna    
      create a new class,       

195
00:08:22,097 --> 00:08:23,029
   you already know how to do   
             that.              

196
00:08:23,031 --> 00:08:24,364
     We just type class and     

197
00:08:24,366 --> 00:08:27,500
  then the name of the class,   
 it's gonna be CalculatorBrain. 

198
00:08:27,502 --> 00:08:31,336
  Now, this class is not going  
   to inherit from any other    

199
00:08:31,338 --> 00:08:32,537
          class, 'kay?          

200
00:08:32,539 --> 00:08:35,640
  Just gonna be a basic swift,  
             class.             

201
00:08:35,642 --> 00:08:38,509
 Now sometimes your model might 
  inherit from a class called   

202
00:08:38,511 --> 00:08:40,861
         NSObject, and          

203
00:08:40,862 --> 00:08:43,212
 I'll talk about that a little  
 later maybe on Wednesday even. 

204
00:08:43,215 --> 00:08:46,683
 You'll get a little bit if you 
   inherit from NSObject, but   

205
00:08:46,685 --> 00:08:50,587
  we're just gonna have it be   
 basic swift base class, 'kay.  

206
00:08:50,589 --> 00:08:52,388
  It doesn't, doesn't need to   
   inherit any functionality.   

207
00:08:53,691 --> 00:08:55,224
             Okay.              

208
00:08:55,225 --> 00:08:56,758
  So what's gonna be our data   
          structure of          

209
00:08:56,761 --> 00:08:57,859
     our calculator brain.      

210
00:08:57,861 --> 00:08:59,961
   It, it has to be a little    
    different than the data     

211
00:08:59,963 --> 00:09:01,662
    structure we used in our    
         controller to          

212
00:09:01,664 --> 00:09:04,565
 capture the operand because we 
     gotta capture operand,     

213
00:09:04,567 --> 00:09:07,368
  operations and operands both  
           into this.           

214
00:09:07,370 --> 00:09:12,305
  So we want it to be a stack,  
 I'm gonna call it opStack and  

215
00:09:12,307 --> 00:09:14,741
 but the type can't be array of 
            double.             

216
00:09:15,743 --> 00:09:20,245
   Okay, because operands are   
     doubles but operations     

217
00:09:20,247 --> 00:09:23,648
  are like a combination of a   
   syn, a mathematical symbol   

218
00:09:23,650 --> 00:09:26,651
 like plus, times and then also 
          a function.           

219
00:09:26,653 --> 00:09:29,186
  Function that actually does   
        the thing, 'kay?        

220
00:09:29,188 --> 00:09:30,888
 So obviously we can't do that  
               so               

221
00:09:30,890 --> 00:09:32,022
 we're gonna have to need some, 

222
00:09:32,024 --> 00:09:34,691
  some new data structure I'm   
      gonna call that data      

223
00:09:34,693 --> 00:09:37,760
  structure op and we're gonna  
    define that in a second.    

224
00:09:37,762 --> 00:09:41,663
  So op is gonna be something   
  that could be an operand or   

225
00:09:41,665 --> 00:09:43,532
      maybe it could be an      
           operation.           

226
00:09:43,534 --> 00:09:45,233
             'Kay?              
     It could be either or.     

227
00:09:45,235 --> 00:09:47,519
             'Kay?              

228
00:09:47,520 --> 00:09:49,804
  Now a couple of things about  
    this here is of course I    

229
00:09:49,806 --> 00:09:51,572
 have to initialize this so I'm 
            gonna do            

230
00:09:51,574 --> 00:09:54,575
  the exact same thing that I   
 did in the controller which is 

231
00:09:54,577 --> 00:09:56,810
 I'm just gonna create an empty 
          array of op.          

232
00:09:56,812 --> 00:09:59,496
             'Kay?              
              And               

233
00:09:59,497 --> 00:10:02,181
  I'm even gonna use a little   
    different syntax, 'kay?     

234
00:10:02,183 --> 00:10:03,382
     We've been using this.     

235
00:10:03,384 --> 00:10:05,851
   I like this syntax because   
         especially for         

236
00:10:05,853 --> 00:10:08,553
  people who are first time to  
     swift it's very clear,     

237
00:10:08,555 --> 00:10:12,624
  this is an array and inside   
  the array are these ops but   

238
00:10:12,626 --> 00:10:17,661
   this is evidently not the    
   syntax that is preferred.    

239
00:10:17,663 --> 00:10:23,433
    The preferred syntax is     
   actually to do [Op] 'kay?    

240
00:10:23,435 --> 00:10:27,070
  So this is just an alternate  
     syntax, putting square     

241
00:10:27,072 --> 00:10:29,739
 brackets with the type in the  
 middle for declaring an array. 

242
00:10:29,741 --> 00:10:32,008
  It's exactly the same thing   
     just different way of      

243
00:10:32,010 --> 00:10:34,276
 typing in, identical in every  
         possible way,          

244
00:10:34,278 --> 00:10:35,777
     it's exactly the same.     

245
00:10:35,779 --> 00:10:37,062
             Okay.              

246
00:10:37,063 --> 00:10:38,346
  I think this is a little bit  
      preferred because if      

247
00:10:38,348 --> 00:10:41,449
  you ever initialize an array  
     which will see later.      

248
00:10:41,451 --> 00:10:43,884
 You use this syntax to create  
         the array and          

249
00:10:43,886 --> 00:10:45,686
       put things in it.        

250
00:10:45,687 --> 00:10:47,487
   So I, I can understand why   
         they do that.          

251
00:10:47,490 --> 00:10:50,257
             Okay?              
   So this is an array of op.   

252
00:10:50,259 --> 00:10:50,924
        That make sense?        

253
00:10:51,860 --> 00:10:53,859
   Now, let's talk about op.    

254
00:10:53,861 --> 00:10:55,094
 What kinda thing should op be? 

255
00:10:55,096 --> 00:10:57,596
    Well, we could make op a    
             class.             

256
00:10:57,598 --> 00:10:59,731
  An op could have a property   
            for op,             

257
00:10:59,733 --> 00:11:02,033
 for an operand, which would be 
   the value of the operand.    

258
00:11:02,035 --> 00:11:05,169
     It could have another      
    property, which is the,     

259
00:11:05,171 --> 00:11:07,371
  symbol, mathematical symbol   
     for the operation and      

260
00:11:07,373 --> 00:11:10,173
 another property, which was a  
    function, which does it,    

261
00:11:10,175 --> 00:11:12,509
 and obviously, if the operand  
            is set,             

262
00:11:12,511 --> 00:11:15,144
  then the other two would be   
    not set and vice versa.     

263
00:11:15,146 --> 00:11:18,481
 But that, that's a little bit  
   weird to have a class that   

264
00:11:18,483 --> 00:11:21,250
 has properties that sometimes  
        they're set and,        

265
00:11:21,252 --> 00:11:23,218
  and if other things are set,  
        they're not set.        

266
00:11:23,220 --> 00:11:24,285
 It's really not what we want.  

267
00:11:24,287 --> 00:11:27,621
   What we really want is an    
             enum.              

268
00:11:28,591 --> 00:11:31,658
 Okay, so you're probably used  
 to enums in other languages so 

269
00:11:31,660 --> 00:11:32,959
    I'm gonna create an ema,    

270
00:11:32,961 --> 00:11:35,728
 [UNKNOWN] enum, it looks very  
   similar creating a class.    

271
00:11:35,730 --> 00:11:38,397
    I just use the word enum    
       instead of class,        

272
00:11:38,399 --> 00:11:41,633
  obviously no inheritance for  
          enum, sorry.          

273
00:11:41,635 --> 00:11:45,537
 But enums can have functions,  
      just like the class,      

274
00:11:45,539 --> 00:11:49,474
 they can also have properties  
 but only computed properties.  

275
00:11:49,476 --> 00:11:51,242
    'Kay, the Camry's stored    
          properties.           

276
00:11:52,278 --> 00:11:55,779
  So you know enums are kinda   
      for basic types and       

277
00:11:55,781 --> 00:11:58,782
  enums are really great when   
 you have something that can be 

278
00:11:58,784 --> 00:12:01,317
    one thing one time and a    
 different thing another time.  

279
00:12:01,319 --> 00:12:02,585
   And never both at the same   
             time,              

280
00:12:02,587 --> 00:12:03,952
  that's kinda what enums are   
             right,             

281
00:12:03,954 --> 00:12:06,421
 they're enumerating different  
        possibilities so        

282
00:12:06,423 --> 00:12:09,257
   we could say you know case   
   operand and we could have    

283
00:12:09,259 --> 00:12:15,563
 a case operation, to have the  
 different things that we have. 

284
00:12:15,565 --> 00:12:19,133
 Now, in other languages, this  
 would be as far as we can go.  

285
00:12:19,135 --> 00:12:21,101
    And this would be pretty    
            useless.            

286
00:12:21,103 --> 00:12:24,270
   Because if we had an array   
   that just said whether it    

287
00:12:24,272 --> 00:12:26,105
      was an operand or an      
 operation, that doesn't help.  

288
00:12:26,107 --> 00:12:27,973
   I need the actual operand.   

289
00:12:27,975 --> 00:12:30,242
     I need the operations      
    mathematical symbol and     

290
00:12:30,244 --> 00:12:31,977
         its function.          

291
00:12:31,978 --> 00:12:33,711
  I need them, they have to be  
        in this e-mail.         

292
00:12:33,714 --> 00:12:36,448
  And Swift has a really cool   
     feature where you can      

293
00:12:36,450 --> 00:12:41,085
 associate data with any of the 
      cases in the e-mail.      

294
00:12:41,087 --> 00:12:44,021
  So for an operand I'm gonna   
   associate the data double.   

295
00:12:45,123 --> 00:12:48,157
  So if my enum is an operand   
        it'll have this         

296
00:12:48,159 --> 00:12:49,558
   double associated with it,   

297
00:12:49,560 --> 00:12:52,194
  that's gonna be the value of  
          the operand.          

298
00:12:52,196 --> 00:12:54,013
       And similarly for        

299
00:12:54,014 --> 00:12:55,831
  operation I'm actually gonna  
   do unary operation first,    

300
00:12:55,833 --> 00:12:57,866
    that's a single argument    
           operation.           

301
00:12:57,868 --> 00:13:00,768
 I'm gonna have a string which  
    is gonna be the symbol,     

302
00:13:00,770 --> 00:13:01,936
  the mathematical symbol for   

303
00:13:01,938 --> 00:13:04,238
   it and of course I'm gonna   
        have a function.        

304
00:13:05,341 --> 00:13:08,408
 Okay again functions are just  
        types in swift,         

305
00:13:08,410 --> 00:13:11,344
 it's no different than string  
 'kay we're just saying this is 

306
00:13:11,346 --> 00:13:13,612
 a function, put a function in  
             there.             

307
00:13:13,614 --> 00:13:15,147
  A lot of times we'll do the   
        curly braces and        

308
00:13:15,149 --> 00:13:17,883
 put a closure use closures to  
    create our function but     

309
00:13:17,885 --> 00:13:19,584
     we could create actual     
         functions and          

310
00:13:19,586 --> 00:13:21,185
   pass them in there, that's   
             fine.              

311
00:13:21,187 --> 00:13:24,121
    So, and we'd also want a    
   binary function here that    

312
00:13:24,123 --> 00:13:25,289
      takes two arguments.      

313
00:13:26,959 --> 00:13:28,625
      Binary operation and      

314
00:13:28,627 --> 00:13:30,726
 just those two arguments here  
       in it's function.        

315
00:13:32,963 --> 00:13:34,296
             Okay?              

316
00:13:34,297 --> 00:13:35,630
   So now we have the stack.    

317
00:13:35,632 --> 00:13:37,499
             Okay.              
   Which is an array of ops.    

318
00:13:37,501 --> 00:13:41,369
 And these ops are either each  
 op in this, is array is either 

319
00:13:41,371 --> 00:13:44,638
   an operand or it's one of    
 these two kinds of operations. 

320
00:13:46,308 --> 00:13:49,142
   Okay so so this is great.    

321
00:13:49,144 --> 00:13:53,979
 We got this op it's either an  
    operation or an operand.    

322
00:13:53,981 --> 00:13:56,882
 How are we going to, you know, 
        put things into         

323
00:13:56,884 --> 00:13:59,251
 this op stack for example and  
      something like that.      

324
00:13:59,253 --> 00:14:01,653
  So let, let's go talk about,  
            the API.            

325
00:14:01,655 --> 00:14:05,356
 A, API stands for application  
     programing interface.      

326
00:14:05,358 --> 00:14:09,060
  API is kind of the meth, all  
   the methods and properties   

327
00:14:09,062 --> 00:14:13,230
  that make up your class, the  
      description of them.      

328
00:14:13,232 --> 00:14:16,066
  So I'll use that word a lot,  
              API.              

329
00:14:16,068 --> 00:14:18,835
 And we really need to be able  
 to put an operand on there and 

330
00:14:18,837 --> 00:14:20,736
 stack, and we need to be able  
    to put an operation on.     

331
00:14:20,738 --> 00:14:24,573
  So I'm gonna have a function  
    called pushOperand, and     

332
00:14:24,575 --> 00:14:27,809
  it's gonna take an operand,   
       which is a double.       

333
00:14:27,811 --> 00:14:30,578
   Okay it's not gonna return   
      anything yet anyway.      

334
00:14:30,580 --> 00:14:33,715
  And to push an operand on my  
  stack, could not be easier,   

335
00:14:33,717 --> 00:14:36,217
       I'm just gonna say       
        opStack.append,         

336
00:14:36,219 --> 00:14:41,088
 you'll remember that append is 
    a function in array and     

337
00:14:41,090 --> 00:14:42,355
   the thing that you put on,   

338
00:14:42,357 --> 00:14:45,858
    obviously has to be this    
         little type T.         

339
00:14:45,860 --> 00:14:48,627
 T is whatever you put in here, 
      so op in this case.       

340
00:14:48,629 --> 00:14:50,729
 So we have to have an op here. 

341
00:14:50,731 --> 00:14:52,964
   How do you create an enum    
             item?              

342
00:14:52,966 --> 00:14:58,436
  You just Op.Operand and you   
 give it the associated value.  

343
00:14:58,438 --> 00:15:01,539
             'Kay?              

344
00:15:01,541 --> 00:15:06,777
 So, very simple kind of way to 
     create these enums and     

345
00:15:06,779 --> 00:15:10,013
 associate the value with them. 

346
00:15:10,015 --> 00:15:11,114
   Any questions about that?    

347
00:15:12,450 --> 00:15:13,749
    Okay, and then how about    
          operations?           

348
00:15:13,751 --> 00:15:15,384
  We'll have instead of push,   

349
00:15:15,386 --> 00:15:18,720
     we're gonna call this      
       performOperation.        

350
00:15:18,722 --> 00:15:20,922
     And I think when I do      
   performOperation, what I'm   

351
00:15:20,924 --> 00:15:23,024
  gonna have is, my calculator  
     brain is going to have     

352
00:15:23,026 --> 00:15:26,493
  a bunch of known operations,  
   things it knows how to do.   

353
00:15:26,495 --> 00:15:27,861
    And when you perform an     
           operation,           

354
00:15:27,863 --> 00:15:30,697
      you just specify the      
   mathematical symbol of it.   

355
00:15:30,699 --> 00:15:33,533
 So the argument here is going  
         to be symbol,          

356
00:15:33,535 --> 00:15:34,800
       which is a string.       

357
00:15:34,802 --> 00:15:36,301
             Okay?              

358
00:15:36,303 --> 00:15:41,306
  So, to append an op on here   
     that is, an operation,     

359
00:15:41,308 --> 00:15:43,274
  I'm gonna need to have these  
       known operations.        

360
00:15:43,276 --> 00:15:44,775
  So, how am I gonna do that?   

361
00:15:44,777 --> 00:15:47,878
      Well, to have known       
  operations, I'm gonna create  

362
00:15:47,880 --> 00:15:51,048
 another instance variable here 
      called knownOps, so       

363
00:15:51,050 --> 00:15:52,816
      my known operations.      

364
00:15:52,818 --> 00:15:55,251
      And it's gonna be a       
          dictionary.           

365
00:15:55,253 --> 00:15:57,019
   Okay, now, you read about    
        dictionaries in         

366
00:15:57,021 --> 00:15:58,987
      last week's reading       
          assignment.           

367
00:15:58,989 --> 00:16:00,489
 That's why I have the reading  
     assignment due today.      

368
00:16:00,491 --> 00:16:02,257
   Cuz then I can know you've   
        read about them.        

369
00:16:02,259 --> 00:16:02,824
        I hope you have.        

370
00:16:05,495 --> 00:16:07,428
   And so, how do I create a    
          dictionary?           

371
00:16:07,430 --> 00:16:08,995
      It looks like this,       
          Dictionary.           

372
00:16:08,997 --> 00:16:11,531
   And it's the same kind of    
    thing with these angled     

373
00:16:11,533 --> 00:16:14,434
 brackets, because you have to  
    say for the dictionary,     

374
00:16:14,436 --> 00:16:17,036
  what type are the keys, what  
      type are the values.      

375
00:16:17,038 --> 00:16:20,506
  And our dictionary is gonna   
 have keys that are strings and 

376
00:16:20,508 --> 00:16:22,874
  it's gonna have values that   
            are ops.            

377
00:16:22,876 --> 00:16:26,478
       Oops, sorry, ops.        

378
00:16:26,480 --> 00:16:28,913
   Okay, and I'm gonna create   
              one.              

379
00:16:28,915 --> 00:16:29,947
             'Kay?              

380
00:16:29,949 --> 00:16:32,316
   Everyone understand this?    

381
00:16:32,317 --> 00:16:34,684
  Now, this knownOps, I'm just  
 gonna put all of the ops that  

382
00:16:34,687 --> 00:16:38,955
 I know in there, where the key 
 is the symbol and the value is 

383
00:16:38,957 --> 00:16:42,392
  the actual op, and then when  
 someone says performOperation, 

384
00:16:42,394 --> 00:16:44,527
  I'm gonna look it up in the   
           knownOps.            

385
00:16:44,529 --> 00:16:47,329
    And when I find it, then    
    that's the operation I'm    

386
00:16:47,331 --> 00:16:49,531
 gonna push onto the stack, all 
             right?             

387
00:16:49,533 --> 00:16:51,183
          Make sense?           

388
00:16:51,184 --> 00:16:52,834
    But I have to load this     
          knownOps up.          

389
00:16:52,836 --> 00:16:55,903
  Oh, but first of all, so let  
   me talk about this syntax.   

390
00:16:55,905 --> 00:16:58,973
 Just like array has a special  
     syntax with the square     

391
00:16:58,975 --> 00:17:00,941
 brackets, so does dictionary.  

392
00:17:00,943 --> 00:17:03,510
  So to have a dictionary like  
     this with this kind of     

393
00:17:03,512 --> 00:17:07,080
 special syntax, we're gonna do 
      open square bracket.      

394
00:17:07,082 --> 00:17:12,752
  And then a colon in between   
          the key and           

395
00:17:12,754 --> 00:17:15,254
  the value type, so it looks   
           like that.           

396
00:17:15,256 --> 00:17:17,789
  So it looks very similar to   
           array, but           

397
00:17:17,791 --> 00:17:19,524
  you've got this thing where   
     you've got the key and     

398
00:17:19,526 --> 00:17:22,093
    the value separated by a    
             colon.             

399
00:17:22,095 --> 00:17:22,660
             'Kay?              

400
00:17:23,796 --> 00:17:25,429
 Same thing, though, exact same 
             thing.             

401
00:17:25,431 --> 00:17:27,430
  Just a dictionary, strings,   

402
00:17:27,432 --> 00:17:28,698
 looking up in strings to find  
              ops.              

403
00:17:28,700 --> 00:17:32,701
  All right, so how am I gonna  
   initialize this knownOps?    

404
00:17:32,703 --> 00:17:33,869
 Well, this is a great time for 

405
00:17:33,871 --> 00:17:37,906
 the first time for you see an  
       initializer, okay?       

406
00:17:37,908 --> 00:17:41,876
   So far we've been creating   
 classes like right here, okay, 

407
00:17:41,878 --> 00:17:44,311
     just by putting these      
          parentheses.          

408
00:17:44,313 --> 00:17:46,680
    And I told you that was     
   calling an initializer in    

409
00:17:46,682 --> 00:17:47,947
     Dictionary, okay, and      

410
00:17:47,949 --> 00:17:50,817
    this one was calling an     
     initializer in Array.      

411
00:17:50,819 --> 00:17:52,585
  And so we're gonna have our   
       own initializer in       

412
00:17:52,587 --> 00:17:55,421
      CalculatorBrain, and      

413
00:17:55,422 --> 00:17:58,256
   we just do that by saying    
     init, like this, okay.     

414
00:17:58,258 --> 00:18:01,726
   Now any time someone says    
 something like let brain equal 

415
00:18:01,728 --> 00:18:05,296
   CalculatorBrain, with the    
       parentheses, okay?       

416
00:18:05,298 --> 00:18:07,531
   It's going to call an init   
              that              

417
00:18:07,533 --> 00:18:09,667
  matches the same arguments.   

418
00:18:09,669 --> 00:18:11,668
 In this case, no arguments, so 
   it's gonna call this init.   

419
00:18:13,505 --> 00:18:14,070
             Okay.              

420
00:18:15,439 --> 00:18:16,838
   Couldn't be simpler there.   

421
00:18:16,840 --> 00:18:18,173
   So what are we gonna do in   
           this init?           

422
00:18:18,175 --> 00:18:20,375
  We're just gonna initialize   
       this known op, so        

423
00:18:20,377 --> 00:18:24,545
  I'm just gonna start putting  
    some known ops into this    

424
00:18:24,547 --> 00:18:26,780
      knownOps dictionary.      

425
00:18:26,782 --> 00:18:31,617
   We need our friend special   
   characters here for that.    

426
00:18:31,619 --> 00:18:34,253
     So let's go ahead and      

427
00:18:34,254 --> 00:18:36,888
   put, well, let's put times   
      here first, I guess.      

428
00:18:36,891 --> 00:18:39,257
 Okay, and we need to create an 
           operation.           

429
00:18:39,259 --> 00:18:40,392
 How do we create an operation? 

430
00:18:40,394 --> 00:18:43,461
 Very similar to how we created 
           this enum.           

431
00:18:43,463 --> 00:18:47,431
 Op, dot, and times is a binary 
           operation.           

432
00:18:47,433 --> 00:18:49,566
   And you can see that it's    
      typing this for me.       

433
00:18:49,568 --> 00:18:51,735
  I'm just pressing Tab to get  
             along.             

434
00:18:51,737 --> 00:18:56,105
  This is the symbol, which is  
        this thing here.        

435
00:18:56,107 --> 00:18:58,908
  Now, this is kinda bad code   
        that I ended up         

436
00:18:58,910 --> 00:19:00,809
 typing this twice in the same  
             line.              

437
00:19:00,811 --> 00:19:03,378
   If I accidentally use the    
            wrong x,            

438
00:19:03,380 --> 00:19:06,881
   like some x from somewhere   
   else or the x just from my   

439
00:19:06,883 --> 00:19:10,451
  keyboard might be different   
 from this x, than this x, ugh, 

440
00:19:10,453 --> 00:19:12,920
 we could get in trouble where  
  these things don't match up.  

441
00:19:12,922 --> 00:19:15,489
 So later, in the, right at the 
     very end of the demo,      

442
00:19:15,491 --> 00:19:16,857
   I'm gonna show you how we    
        could do this in        

443
00:19:16,859 --> 00:19:20,960
  a way where we don't have to  
  type this x twice like that.  

444
00:19:20,962 --> 00:19:22,161
             Okay.              

445
00:19:22,162 --> 00:19:23,361
    But now we just need the    
           function.            

446
00:19:23,364 --> 00:19:25,230
  We know how to do that with   
           closures.            

447
00:19:25,232 --> 00:19:27,866
      We say $0 times $1.       

448
00:19:27,868 --> 00:19:29,000
        End the closure.        

449
00:19:29,002 --> 00:19:31,736
   And yes, I could put this    
        closure outside,        

450
00:19:31,738 --> 00:19:33,838
   since it's the last thing    
             here.              

451
00:19:33,840 --> 00:19:37,107
 That is also legal to do when  
        you're creating         

452
00:19:37,109 --> 00:19:39,109
   the operations like this.    

453
00:19:39,111 --> 00:19:40,310
             'Kay?              

454
00:19:40,312 --> 00:19:41,377
     So that's kinda nice.      

455
00:19:41,379 --> 00:19:44,880
    Let's do our other three    
    binary operations here.     

456
00:19:44,882 --> 00:19:46,982
        We'll go divide.        

457
00:19:46,984 --> 00:19:49,784
  And this is where it really   
    gets annoying to have to    

458
00:19:49,786 --> 00:19:51,736
         type it twice.         

459
00:19:51,737 --> 00:19:53,687
     But I have to show you     
  something else before I can   

460
00:19:53,690 --> 00:19:56,357
 show you how to do that right. 

461
00:19:57,726 --> 00:19:58,591
         Let's go here.         

462
00:19:58,593 --> 00:20:02,362
    And there we have minus.    

463
00:20:02,364 --> 00:20:04,997
    You can see there's two     
  different minuses there, so   

464
00:20:04,999 --> 00:20:07,866
  hopefully I clicked the same  
   minus in both those spots.   

465
00:20:07,868 --> 00:20:09,434
    And then we change these    
            things.             

466
00:20:09,436 --> 00:20:13,671
    We know that divide is 1    
       divided by $0, and       

467
00:20:13,673 --> 00:20:15,106
         this is plus.          

468
00:20:16,742 --> 00:20:21,678
   And this is 1 minus 0, $1    
       minus $0, okay, so       

469
00:20:21,680 --> 00:20:23,813
      everyone cool here?       

470
00:20:25,350 --> 00:20:27,483
 These enums are really easy to 
            create.             

471
00:20:27,485 --> 00:20:31,920
   The API of them is really,   
      really nice, simple.      

472
00:20:31,922 --> 00:20:34,055
   And then we have our other   
           operation,           

473
00:20:34,057 --> 00:20:37,058
 which is our unary operation,  
     which is square root.      

474
00:20:37,060 --> 00:20:40,861
   So let's put that in here,   
   square root is right here.   

475
00:20:40,863 --> 00:20:43,830
  And we'll put it right here.  

476
00:20:45,266 --> 00:20:48,267
    And square root is not a    
     binary operation it's      

477
00:20:48,269 --> 00:20:49,601
       a unary operation.       

478
00:20:49,603 --> 00:20:53,738
    Oops, look at all this.     

479
00:20:53,740 --> 00:20:56,591
             'Kay?              

480
00:20:56,592 --> 00:20:59,443
  And of course, inside here,   
    it's square root of $0.     

481
00:20:59,445 --> 00:21:01,745
  Okay, you remember that from  
           last time.           

482
00:21:01,747 --> 00:21:02,879
        So this is good.        

483
00:21:02,881 --> 00:21:04,864
      Now, while I'm here,      

484
00:21:04,865 --> 00:21:06,848
   I wanna show you a couple    
  things more about closures.   

485
00:21:06,851 --> 00:21:07,950
             Okay.              

486
00:21:07,952 --> 00:21:10,052
    This, what is this curly    
             brace?             

487
00:21:10,054 --> 00:21:12,721
 It's a function that takes one 
          argument and          

488
00:21:12,723 --> 00:21:14,356
     returns one argument.      

489
00:21:14,358 --> 00:21:16,308
        And we know that        

490
00:21:16,309 --> 00:21:18,259
   it's doubles because we're   
  creating a unary operation.   

491
00:21:18,261 --> 00:21:21,962
   And so, it's inferring the   
       type here, right?        

492
00:21:21,964 --> 00:21:23,530
   Everyone understand that?    

493
00:21:23,532 --> 00:21:27,133
 Well, there's another function 
  that returns a function, or   

494
00:21:27,135 --> 00:21:28,901
 there's another function that  
       takes a double and       

495
00:21:28,903 --> 00:21:31,570
  returns a double, that does   
          square root,          

496
00:21:31,572 --> 00:21:33,772
    it's called square root.    

497
00:21:33,774 --> 00:21:36,941
 So inside here, we could just  
        say square root.        

498
00:21:38,178 --> 00:21:40,811
 Okay, we don't even need this  
           business.            

499
00:21:42,881 --> 00:21:44,080
   Just wanna emphasize that    

500
00:21:44,082 --> 00:21:45,515
 we're just passing a function  
             here.              

501
00:21:45,517 --> 00:21:47,450
     And it can be a named      
          function, or  
它可以是一个被命名的函数        

502
00:21:47,452 --> 00:21:49,518
    we could use these curly    
            braces. 
或者可以用花括号            

503
00:21:49,520 --> 00:21:52,754
   Now, this is really gonna    
 freak you out, cuz watch this. 
现在，让你惊讶的事来了，看好了

504
00:21:52,756 --> 00:21:57,091
 For times, there's a function  
 that does times called times.  
对于乘法，有一个做乘法运算的函数就叫做“*”
505
00:21:58,728 --> 00:22:00,728
             Okay.              

506
00:22:00,729 --> 00:22:02,729
     So in Swift, all these     
      operators, times and      
在Swift里，所有的运算符，乘号等等
507
00:22:02,732 --> 00:22:04,664
   all these things, are just   
           functions.   
        都是函数

508
00:22:04,666 --> 00:22:06,966
     They just happen to be     
  specified in a way that says
  
509
00:22:06,968 --> 00:22:09,068
 that they can be infix, right, 
        between the two         

510
00:22:09,070 --> 00:22:11,370
  arguments instead of taking   
 the arguments in parentheses.  

511
00:22:11,372 --> 00:22:13,138
 And we do the same thing here  
           with plus.  
然后我们对加法做同样的事         

512
00:22:14,641 --> 00:22:16,074
        All right, plus.        
好的，加号
513
00:22:16,076 --> 00:22:17,508
    Now, we can't do it with    
           divide and  
现在要注意，这种方法不适用于除法和减法         

514
00:22:17,510 --> 00:22:20,378
   minus because the order is   
           backwards.   
因为运算方向是反的        

515
00:22:20,380 --> 00:22:22,146
  Right, we put the things on   
           the stack,   
好，我们把这些东西放到栈上

516
00:22:22,148 --> 00:22:23,513
 we pull them out backwards, so 

517
00:22:23,515 --> 00:22:25,081
   we can't do it with those,   
              but.              

518
00:22:27,919 --> 00:22:31,086
 I just wanna emphasize, that's 
     what's going on there.     

519
00:22:31,088 --> 00:22:33,455
 Okay, so now we have this nice 
           knownOps.     
好，现在我们做好了这些KnwonOps       

520
00:22:33,457 --> 00:22:34,222
     So we have this thing.     

521
00:22:34,224 --> 00:22:36,724
        It's loaded up.         
它已经装载好了
522
00:22:36,725 --> 00:22:39,225
 It gets loaded up whenever the 
 CalculatorBrain gets created.  
每当CalculatorBrain被创建它就会被装载

523
00:22:39,228 --> 00:22:41,612
      So that's all good.  
万事俱备     

524
00:22:41,613 --> 00:22:43,997
 Now we can use that down here  
      in performOperation.  
现在我们可以将它用在performOperation上    

525
00:22:43,999 --> 00:22:47,134
 All right, so how are we gonna 
 use this in performOperation?  
好，那我们要怎么使用呢

526
00:22:47,136 --> 00:22:50,870
  Well, we basically wanna let  
      the operation equal    
我们让operation等于   

527
00:22:50,872 --> 00:22:53,172
      knownOps sub symbol.  
knownOps参数symbol    

528
00:22:53,174 --> 00:22:55,240
             Okay?              
  Someone passed us a symbol.   
明白了吗？使用者传递给我们一个参数symbol

529
00:22:55,242 --> 00:22:56,641
 They're trying to perform this 
           operation.    
当他们想用这个方法的时候       

530
00:22:56,643 --> 00:22:58,810
 So this is either a plus or a  
             times.             
参数可以是加法或者乘法
531
00:22:58,812 --> 00:23:00,111
   Hopefully an operation we    
             know.   
   是我们已知的运算符      

532
00:23:00,113 --> 00:23:02,747
 And we're gonna look it up in  
           knownOps.   
然后我们会来到KnownOps         

533
00:23:02,749 --> 00:23:05,683
 And the way we do that is with 
  the subscript notation with   
然后要做的就是在

534
00:23:05,685 --> 00:23:06,650
      the square brackets.      

535
00:23:06,652 --> 00:23:07,951
             Okay?              
         That's how you         

536
00:23:07,952 --> 00:23:09,251
     look something up in a     
          dictionary.           

537
00:23:09,254 --> 00:23:11,454
   But what might be kind of    
       surprising to you,  
不过有一点可能会让你惊讶   

538
00:23:11,456 --> 00:23:13,622
  what type do you think this   
      would be, operation?
得到的operation，你觉得是什么类型的呢？   

539
00:23:15,292 --> 00:23:17,959
 Any guesses, yeah, some people 
  are saying the right thing. 
猜猜？哈，有人说出了正确答案  

540
00:23:17,961 --> 00:23:20,128
  You'd think this might be an  
              Op,    
你可能会觉得这个是一个Op           

541
00:23:20,130 --> 00:23:24,498
   because I'm looking up in    
 knownOps right here, a string.
因为我在KnownOps这里看，String：Op

542
00:23:24,500 --> 00:23:27,134
  And so hopefully I'm getting  
 an Op, but this is not an Op,
因此可以预见得到的会是一个Op，事实上它并不是Op

543
00:23:27,136 --> 00:23:30,971
  this actually is an Optional  
              Op.  
实际上它是一个Optional Op             

544
00:23:30,973 --> 00:23:33,173
    Okay, now why is that an    
    Optional Op, because you
好了，为什么它会是一个Optional Op，因为    

545
00:23:33,175 --> 00:23:35,541
 might be looking up something  
      that's not in there.      
因为它可能不存在于此
546
00:23:35,543 --> 00:23:38,344
 And it has to return, oh, nil, 
    sorry, couldn't find it, 
而且它没有返回值。“噢，nil，不好意思找不到该值” 

547
00:23:38,346 --> 00:23:41,413
 so that's why it has to be an  
     optional, is returned. 
所以这就是为什么它必须是optional    

548
00:23:41,415 --> 00:23:43,015
        So a dictionary, 
比方说字典       

549
00:23:43,016 --> 00:23:44,616
 whenever you look up something 
        in a dictionary,    
每当你要在字典里面寻找东西的时候    

550
00:23:44,618 --> 00:23:47,118
 it always returns an Optional, 
      okay, either nil or  
它总是会返回一个Optional类型。nil或者是     

551
00:23:47,120 --> 00:23:50,655
 the type of thing you said was 
    supposed to be in there.   
其他它原本的类型 

552
00:23:50,657 --> 00:23:53,457
 So I'm gonna if let here, I'm  
           gonna say, 
所以我在这里加上if          

553
00:23:53,459 --> 00:23:56,827
   if I'm able to look up my    
   operation in my knownOps, 
如果 我能在knownOps里取得我的operation   

554
00:23:56,829 --> 00:23:59,696
  then I'm going to push it on  
        to my op stack. 
那我就将它放进我的op stack.        

555
00:24:02,534 --> 00:24:03,232
             Okay.              

556
00:24:03,234 --> 00:24:06,068
    Are you cool with that? 
明白了吗？    

557
00:24:06,070 --> 00:24:08,303
          Make sense?           

558
00:24:08,305 --> 00:24:10,171
             Okay.              

559
00:24:10,173 --> 00:24:12,407
       Now, what's next?  
好，下一步是什么呢      

560
00:24:12,409 --> 00:24:13,908
             Well.              

561
00:24:13,910 --> 00:24:14,541
          Now we have.          

562
00:24:14,543 --> 00:24:15,509
           Oh, well.            

563
00:24:15,510 --> 00:24:16,476
 I'm gonna take a pause here to 

564
00:24:16,478 --> 00:24:18,845
 talk a little bit about access 
            control.            

565
00:24:18,847 --> 00:24:20,697
             Okay?              

566
00:24:20,698 --> 00:24:22,548
 Access control is about public 
          and private.          

567
00:24:22,550 --> 00:24:25,017
             Okay?              
   What methods in this class   

568
00:24:25,019 --> 00:24:27,353
  are public, in other words,   
   other people can use them,   

569
00:24:27,355 --> 00:24:30,022
    other classes in my code    
     allowed to call them?      

570
00:24:30,024 --> 00:24:31,189
  And what things are private?  

571
00:24:31,191 --> 00:24:32,757
  My internal data structures   
             that I             

572
00:24:32,759 --> 00:24:34,458
   don't want people messing    
             with?              

573
00:24:34,460 --> 00:24:38,428
    Okay, so the way public     
        private works in        

574
00:24:38,430 --> 00:24:41,064
 Swift is kind of interesting.  

575
00:24:41,066 --> 00:24:42,999
   You basically specify the    
       things you want to       

576
00:24:43,001 --> 00:24:45,935
 be private by putting the word 
        private on them.        

577
00:24:45,937 --> 00:24:47,569
  If you don't put any word on  
             them,              

578
00:24:47,571 --> 00:24:50,639
   then they're public inside   
         your program.          

579
00:24:50,641 --> 00:24:52,040
             'Kay?              

580
00:24:52,042 --> 00:24:55,109
   And you only use the word    
 public if you're shipping out, 

581
00:24:55,111 --> 00:24:58,979
  like, a framework of objects  
      to other people, and      

582
00:24:58,981 --> 00:25:02,215
 you want stuff in there to be  
 public outside the framework.  

583
00:25:03,251 --> 00:25:04,684
 So I'm making some framework,  

584
00:25:04,686 --> 00:25:07,153
  a bunch of objects that I'm   
  trying to sell to people or   

585
00:25:07,155 --> 00:25:09,555
   I get people to use to do    
         something, and         

586
00:25:09,557 --> 00:25:12,624
    of course I'm gonna have    
 things where my objects inside 

587
00:25:12,626 --> 00:25:14,192
 my framework can talk to each  
             other.             

588
00:25:14,194 --> 00:25:16,361
 There's no keyword needed for  
             that.              

589
00:25:16,363 --> 00:25:18,229
  Then I'll have things inside  
        certain objects         

590
00:25:18,231 --> 00:25:20,464
 that are private only to that  
   object, I'll say private.    

591
00:25:20,466 --> 00:25:24,267
 And them some of them might be 
 public that the customer who's 

592
00:25:24,269 --> 00:25:27,404
     buying my objects, my      
      framework, can use.       

593
00:25:27,406 --> 00:25:29,238
  Now, in this class we're not  
   gonna be doing frameworks,   

594
00:25:29,240 --> 00:25:30,840
  we don't really have time to  
        get to that, so         

595
00:25:30,842 --> 00:25:32,508
  we're not gonna be using the  
        keyword public,         

596
00:25:32,510 --> 00:25:34,076
    we won't ever use that,     

597
00:25:34,078 --> 00:25:35,510
   because we don't have any    
          frameworks.           

598
00:25:35,512 --> 00:25:37,578
 But we are gonna use private.  

599
00:25:37,580 --> 00:25:39,180
 And, starting with assignment  
              two,              

600
00:25:40,216 --> 00:25:42,516
  it's one of your evaluation   
     criteria is gonna be,      

601
00:25:42,518 --> 00:25:44,918
  make private things private.  

602
00:25:44,920 --> 00:25:45,985
             'Kay?              

603
00:25:45,987 --> 00:25:47,453
  So that is important to do.   

604
00:25:47,455 --> 00:25:48,354
    And you could just say,     

605
00:25:48,356 --> 00:25:49,988
 well, I like everything to be  
            public.             

606
00:25:49,990 --> 00:25:51,156
       Well, that's bad.        

607
00:25:51,158 --> 00:25:53,391
             Okay?              
        If you make your        

608
00:25:53,392 --> 00:25:55,625
 internal structure public, and 
   some other object in your    

609
00:25:55,628 --> 00:25:58,796
 program starts mucking with it 
  and breaks your object, and   

610
00:25:58,798 --> 00:26:00,931
 then you come to a new version 
      of your program, and      

611
00:26:00,933 --> 00:26:03,467
 you change something, and now  
     everybody's breaking.      

612
00:26:03,469 --> 00:26:05,335
    That's bad, okay, that's    
             chaos.             

613
00:26:05,337 --> 00:26:08,671
  So the only things that want  
  to be not private are things  

614
00:26:08,673 --> 00:26:11,507
 that you're committing to sign 
         up to support.         

615
00:26:11,509 --> 00:26:14,677
   So in this class, the only   
        public things so        

616
00:26:14,679 --> 00:26:17,279
    far are the initializer.    

617
00:26:17,281 --> 00:26:18,513
  Obviously, we want to allow   
           people to            

618
00:26:18,515 --> 00:26:19,847
   create a CalculatorBrain.    

619
00:26:19,849 --> 00:26:21,349
     That's clearly public.     

620
00:26:21,351 --> 00:26:25,385
  Also pushing and performing   
    operands and operations.    

621
00:26:25,387 --> 00:26:26,586
         That's public.         

622
00:26:26,588 --> 00:26:28,238
             Okay?              

623
00:26:28,239 --> 00:26:29,889
 Everything else, for now, I'm  
      gonna make private.       

624
00:26:29,891 --> 00:26:31,657
     So I'm gonna make this     
            private.            

625
00:26:31,659 --> 00:26:33,592
   Notice that if I make this   
            private,            

626
00:26:33,594 --> 00:26:35,427
 it's gonna start saying, whoa, 

627
00:26:35,429 --> 00:26:38,730
  wait a second, this can't be  
 public, you know, it can't be  

628
00:26:38,732 --> 00:26:42,100
  non-private because this is   
    private and it uses it.     

629
00:26:42,102 --> 00:26:44,368
   That's what this warning's   
   gonna say right here, see.   

630
00:26:44,370 --> 00:26:45,720
        Property must be        

631
00:26:45,721 --> 00:26:47,071
  declared private because its  
        type is private.        

632
00:26:47,073 --> 00:26:48,205
 Okay, that's the type of this. 

633
00:26:48,207 --> 00:26:49,906
 But I want this to be private  
            anyway,             

634
00:26:49,908 --> 00:26:52,742
    this is my internal data    
      structure, opStack.       

635
00:26:52,744 --> 00:26:56,278
  Now, knownOps is kind of an   
        interesting one.        

636
00:26:56,280 --> 00:26:58,614
 Maybe I would want that to be  
        public one day,         

637
00:26:58,616 --> 00:27:01,650
 because maybe I want people to 
  use my calculator brain and   

638
00:27:01,652 --> 00:27:03,685
       teach it new ops.        

639
00:27:03,687 --> 00:27:05,386
     That wouldn't be that      
         unreasonable.          

640
00:27:05,388 --> 00:27:08,356
   However, I'm not ready to    
 support that functionality in  

641
00:27:08,358 --> 00:27:09,456
      my CalculatorBrain.       

642
00:27:09,458 --> 00:27:12,059
  I'm just not sure I wanna do  
          it this way.          

643
00:27:12,061 --> 00:27:13,827
    Maybe I don't want this     
     property to be public,     

644
00:27:13,829 --> 00:27:17,263
 I might want to just have some 
  functions to learn an op or   

645
00:27:17,265 --> 00:27:18,982
    something like that, so     

646
00:27:18,983 --> 00:27:20,700
   I'm just not sure, so I'm    
    gonna start out private.    

647
00:27:20,702 --> 00:27:23,268
 And that's really, when you're 
        designing APIs,         

648
00:27:23,270 --> 00:27:24,536
   you wanna kinda start out,   

649
00:27:24,538 --> 00:27:27,405
   make it private first, and   
   then open it up as you're    

650
00:27:27,407 --> 00:27:30,308
    willing to support that     
         functionality.         

651
00:27:30,310 --> 00:27:31,709
           Question?            
    >> Is the common view in    

652
00:27:31,711 --> 00:27:34,278
  Swift to make most instance   
     variables private and      

653
00:27:34,280 --> 00:27:36,980
 use getters and setters, or is 
      it to make them, if,      

654
00:27:36,982 --> 00:27:38,882
   if they are supposed to be   
           public, or           

655
00:27:38,884 --> 00:27:40,683
 make them public and then let  
              the?              

656
00:27:40,685 --> 00:27:43,052
         >> All right.          
   So the question is, is it,   

657
00:27:43,054 --> 00:27:45,854
   is it kind of part of the    
       Swift way to make        

658
00:27:45,856 --> 00:27:47,889
 most instant variables private 
              and               

659
00:27:47,891 --> 00:27:50,759
 then have getters and setters  
  that are public to get them.  

660
00:27:50,761 --> 00:27:52,226
 That doesn't really even make  
        sense in Swift.         

661
00:27:52,228 --> 00:27:53,961
 That's more of an Objective-C  
             thing.             

662
00:27:53,963 --> 00:27:56,263
    In Objective-C, you had     
    instance variables, and     

663
00:27:56,265 --> 00:27:59,032
  then you had properties that  
    would get and set them.     

664
00:27:59,034 --> 00:28:00,967
  And Swift has kind of merged  
       those a little bit       

665
00:28:00,969 --> 00:28:05,638
    closer together so that     
 properties are really kind of  

666
00:28:05,640 --> 00:28:08,907
 the public or private getters  
          and setters.          

667
00:28:08,909 --> 00:28:11,043
  So, if you have a property,   
        you just have to        

668
00:28:11,045 --> 00:28:13,178
 decide whether you want people 
        to access it or         

669
00:28:13,180 --> 00:28:15,246
    not, and if not, make it    
            private.            

670
00:28:15,248 --> 00:28:16,681
   And if so, make it public.   

671
00:28:16,683 --> 00:28:19,350
 And that, you know, don't make 
   it non-private, basically.   

672
00:28:19,352 --> 00:28:21,685
  And that's, just that's all   
    you need to think about.    

673
00:28:21,687 --> 00:28:24,854
 I wouldn't even think in Swift 
 in terms of instance variable  

674
00:28:24,856 --> 00:28:26,289
      versus the property.      

675
00:28:26,291 --> 00:28:28,557
  Now, it is still possible in  
       Swift to do that,        

676
00:28:28,559 --> 00:28:30,526
   because you have computed    
          properties.           

677
00:28:30,528 --> 00:28:32,328
 And those could be setters and 

678
00:28:32,329 --> 00:28:34,129
    getters that are setting    
      private properties.       

679
00:28:34,131 --> 00:28:36,464
     But we're gonna see on     
        Wednesday, even,        

680
00:28:36,466 --> 00:28:39,634
 I'm gonna talk to you a little 
 bit about a way that when your 

681
00:28:39,636 --> 00:28:41,902
  properties get set, you can   
           intervene,           

682
00:28:41,904 --> 00:28:44,571
   you can check them to make   
    sure the value is okay.     

683
00:28:44,573 --> 00:28:46,373
    So if you have a public     
           property,            

684
00:28:46,375 --> 00:28:49,142
  you can still protect it by   
    intervening a little bit    

685
00:28:49,144 --> 00:28:51,110
 when people set it or try and  
            get it.             

686
00:28:51,112 --> 00:28:52,912
   So it is possible to still   
  have some protection there,   

687
00:28:52,914 --> 00:28:53,545
        we'll see that.         

688
00:28:56,016 --> 00:28:57,749
  All right, so these are our   
      only public things.       

689
00:28:57,751 --> 00:29:00,651
  Now, there's only one other   
 public thing we need to do in  

690
00:29:00,653 --> 00:29:02,420
 our CalculatorBrain, which is, 

691
00:29:02,422 --> 00:29:04,688
 we need to let people evaluate 
          this stack.           

692
00:29:06,058 --> 00:29:09,492
 So people are pushing operands 
   and performing operations,   

693
00:29:09,494 --> 00:29:11,828
 now they wanna know what's the 
            result.             

694
00:29:11,830 --> 00:29:12,979
             Okay?              
              They              

695
00:29:12,980 --> 00:29:14,129
  pushed an operand of a five.  

696
00:29:14,132 --> 00:29:15,898
  They pushed an operand of a   
             four.              

697
00:29:15,900 --> 00:29:18,166
 They performed operation plus, 

698
00:29:18,168 --> 00:29:19,668
   they want to see four plus   
             five.              

699
00:29:19,670 --> 00:29:21,202
    Where's that nine, okay?    

700
00:29:21,204 --> 00:29:22,403
     They need the result.      

701
00:29:22,405 --> 00:29:25,606
   So we need another public    
          method here,          

702
00:29:25,608 --> 00:29:29,876
 which I'm gonna call evaluate. 

703
00:29:29,878 --> 00:29:31,344
             'Kay?              
         And evaluate,          

704
00:29:31,346 --> 00:29:34,880
   we could have it return a    
      double, for example.      

705
00:29:34,882 --> 00:29:38,917
   And it would just evaluate   
        this opStack and        

706
00:29:38,919 --> 00:29:40,535
       return the value.        

707
00:29:40,536 --> 00:29:42,152
 But I really can't make this a 
            double.             

708
00:29:43,390 --> 00:29:46,524
   Really, this has to be an    
           optional.            

709
00:29:46,526 --> 00:29:48,892
 'Kay, why does this have to be 
          an optional?          

710
00:29:48,894 --> 00:29:52,295
  Well, that's because someone  
 might get my CalculatorBrain,  

711
00:29:52,297 --> 00:29:53,963
  and the first thing they do   
              is,               

712
00:29:53,965 --> 00:29:55,932
  they say, perform operation   
             plus.              

713
00:29:55,934 --> 00:29:57,600
 Okay, well I have no operands. 

714
00:29:57,602 --> 00:29:59,051
             Okay?              
              And               

715
00:29:59,052 --> 00:30:00,501
   you're asking to evaluate    
             plus.              

716
00:30:00,504 --> 00:30:02,287
        I can't do that.        

717
00:30:02,288 --> 00:30:04,071
 So, I have to return something 
  to you, that lets you know,   

718
00:30:04,074 --> 00:30:07,776
 I could not evaluate what you  
      ask me to evaluate.       

719
00:30:07,778 --> 00:30:09,477
  So, I'm gonna return nil in   
           that case,           

720
00:30:09,479 --> 00:30:12,213
  so valuate here really needs  
       to be an optional.       

721
00:30:13,249 --> 00:30:14,848
  'Kay, so you can see some of  
         the thinking,          

722
00:30:14,850 --> 00:30:17,283
 when do you make something an  
       optional when not.       

723
00:30:17,285 --> 00:30:19,285
   'Kay, so this is a classic   
         case of that,          

724
00:30:19,287 --> 00:30:21,787
  where you got sometimes you   
      wanna return it and       

725
00:30:21,789 --> 00:30:23,889
  you can't do it, so you have  
         to return no.          

726
00:30:23,891 --> 00:30:28,793
 All right, so how we going to  
      implement evaluate?       

727
00:30:28,795 --> 00:30:30,595
  Okay, how many people in the  
             class,             

728
00:30:30,597 --> 00:30:34,365
 raise your hands don't be shy, 
    are you comfortable with    

729
00:30:34,367 --> 00:30:37,067
  the computer science concept  
         of recursion?          

730
00:30:39,271 --> 00:30:40,903
             Okay.              
 Excellent, that's about 80 or  

731
00:30:40,905 --> 00:30:43,939
 90%, so I'm gonna explain this 
       really fast then.        

732
00:30:43,941 --> 00:30:45,974
  And if you don't understand   
           recursion,           

733
00:30:45,976 --> 00:30:47,309
 if you didn't raise your hand, 

734
00:30:47,311 --> 00:30:48,843
 that's something you should go 
            review.             

735
00:30:48,845 --> 00:30:50,378
             Okay?              
      [LAUGH] Recursion is      

736
00:30:50,379 --> 00:30:51,912
 something, you should know by  
 the time you take this class,  

737
00:30:51,915 --> 00:30:53,714
    so that's something you     
     definitely wanna know.     

738
00:30:53,716 --> 00:30:57,317
  So, how are we going to use   
          recursion to          

739
00:30:57,319 --> 00:30:59,252
      evaluate this stack?      

740
00:30:59,254 --> 00:31:00,653
  All right, looks like this.   

741
00:31:00,655 --> 00:31:02,988
  I'm gonna do a sample stack,  
          right here.           

742
00:31:02,990 --> 00:31:08,393
 So, let's say I put a 6 on the 
 stack, and then I put a 5, and 

743
00:31:08,395 --> 00:31:14,065
 then I put a plus, and then I  
 put a 4, and then I put times. 

744
00:31:14,067 --> 00:31:15,166
             Okay?              

745
00:31:15,168 --> 00:31:17,968
  So here's our stack, and I'm  
      gonna evaluate this,      

746
00:31:17,970 --> 00:31:18,702
      I'm gonna recursion.      

747
00:31:18,704 --> 00:31:19,769
    How am I gonna do that?     

748
00:31:19,771 --> 00:31:21,437
  Well, really, what I'm gonna  
        do is I'm gonna         

749
00:31:21,439 --> 00:31:24,740
  have a helper method here, a  
    recursive helper method.    

750
00:31:24,742 --> 00:31:27,543
   I'm gonna call it evaluate   
        also, actually.         

751
00:31:27,545 --> 00:31:29,644
  And it's gonna take a stack,  
        as an argument,         

752
00:31:29,646 --> 00:31:31,012
 a stack of things to evaluate. 

753
00:31:31,014 --> 00:31:34,449
  And it's only gonna evaluate  
  the top thing on the stack.   

754
00:31:34,451 --> 00:31:36,717
 That's it just gonna value the 
      top of the stack and      

755
00:31:36,719 --> 00:31:38,819
  return it, but the top thing  
       of the stack might       

756
00:31:38,821 --> 00:31:41,421
    involve looking at every    
 single of one of these, right? 

757
00:31:41,423 --> 00:31:44,157
 Cuz, this times needed to two  
          operations.           

758
00:31:44,159 --> 00:31:47,026
  So, lets look at this, this   
 recursive evaluates gonna come 

759
00:31:47,028 --> 00:31:48,961
  in here, it's gonna try and   

760
00:31:48,962 --> 00:31:50,895
 evaluate the top of the stack, 
       which is a times.        

761
00:31:50,898 --> 00:31:51,597
             Okay?              
         So it's like,          

762
00:31:51,599 --> 00:31:53,265
     okay, I'm doing times.     

763
00:31:53,267 --> 00:31:56,101
   Now for times it needs two   
            operate,            

764
00:31:56,103 --> 00:31:58,302
  two operands here for times.  

765
00:31:58,304 --> 00:31:59,737
   So, it recursively calls,    

766
00:31:59,739 --> 00:32:03,807
 itself to say give me to first 
       operand for time.        

767
00:32:03,809 --> 00:32:07,010
  And so recursively, comes in  
     here, it finds a 4 on      

768
00:32:07,012 --> 00:32:10,913
 the top it's like, I know how  
     to evaluate 4, it's 4.     

769
00:32:10,915 --> 00:32:12,148
      So, it just returns.      

770
00:32:12,150 --> 00:32:15,751
  Okay, so now I have my first  
           operands.            

771
00:32:15,753 --> 00:32:16,618
             'Kay?              
              Now,              

772
00:32:16,620 --> 00:32:18,386
  I take the rest of the stack  
              and               

773
00:32:18,388 --> 00:32:21,255
 evaluate it, to get the second 
              one.              

774
00:32:21,257 --> 00:32:24,291
   And when I do that, I get    
          plus, 'kay?           

775
00:32:24,293 --> 00:32:26,393
  So, plus says, oh, I have to  
         evaluate plus.         

776
00:32:26,395 --> 00:32:27,727
       It needs operands.       

777
00:32:27,729 --> 00:32:30,763
   So, I come over here, I'm    
        getting a plus.         

778
00:32:30,765 --> 00:32:34,700
    And I gotta go recursive    
 again, to go get its operands. 

779
00:32:34,702 --> 00:32:36,401
   I get the 5, that's good.    

780
00:32:36,403 --> 00:32:41,072
 I'm gonna go recursive again,  
     get the 6, over here.      

781
00:32:41,074 --> 00:32:42,907
  And I've evaluated the whole  
             stack.             

782
00:32:42,909 --> 00:32:45,876
 So, you see how I have to keep 
 going backward recursively to  

783
00:32:45,878 --> 00:32:46,576
          my evaluate-          

784
00:32:46,578 --> 00:32:47,911
           >> [COUGH]           

785
00:32:47,912 --> 00:32:49,245
 >> To get the operands for my  
          operations.           

786
00:32:49,247 --> 00:32:51,848
  Once, I get to an operand I   
           can stop,            

787
00:32:51,850 --> 00:32:54,483
 okay number, I got it and I'm  
        out of of there.        

788
00:32:54,485 --> 00:32:56,418
   But every time I encounter   
       another operation,       

789
00:32:56,420 --> 00:32:58,153
      I have to keep going      
         recursively to         

790
00:32:58,155 --> 00:33:00,822
   get all my arguments, any    
     questions about that?      

791
00:33:00,824 --> 00:33:06,327
  'Kay, so it's actually gonna  
  be pretty simple recursion.   

792
00:33:06,329 --> 00:33:08,862
 When you see the code, you're  
  gonna be, that makes sense.   

793
00:33:08,864 --> 00:33:12,832
    So, I'm gonna have this     
 separate I'm gonna put this up 

794
00:33:12,834 --> 00:33:15,201
 on top for scrolling reasons.  

795
00:33:15,203 --> 00:33:18,237
             Oops.              
       Didn't mean that.        

796
00:33:18,239 --> 00:33:19,672
     The separate evaluate.     

797
00:33:20,808 --> 00:33:25,677
 And this evaluate is going to  
      take a stack of ops,      

798
00:33:25,679 --> 00:33:27,078
        as its argument.        

799
00:33:27,080 --> 00:33:28,645
  And why does it take a stack  
            of ops?             

800
00:33:28,647 --> 00:33:31,048
   Because as it's recursing,   

801
00:33:31,050 --> 00:33:32,882
   it's using the rest of the   
              ops.              

802
00:33:32,884 --> 00:33:34,050
    So, you see what I mean?    

803
00:33:34,052 --> 00:33:35,618
           It's not,            

804
00:33:35,619 --> 00:33:37,185
 it can't be looking at the big 
     opStack in our brain.      

805
00:33:37,188 --> 00:33:38,320
     It can't look at this.     

806
00:33:38,322 --> 00:33:40,756
     'Kay, cuz it's kind of     
         consuming it.          

807
00:33:40,758 --> 00:33:42,991
             Right?             
    And every time I call it    

808
00:33:42,992 --> 00:33:45,225
   recursively, I'm gonna get   
  fewer operands to work with.  

809
00:33:45,228 --> 00:33:46,194
   So this is what I'm doing.   

810
00:33:46,196 --> 00:33:47,962
 Now, the first time I call it, 

811
00:33:47,964 --> 00:33:50,864
 right here, I'm gonna give it  
       the full opStack.        

812
00:33:50,866 --> 00:33:53,767
 So, I'll call my recursive one 
           from here.           

813
00:33:53,769 --> 00:33:56,036
  Now, what's this thing gonna  
            return?             

814
00:33:56,038 --> 00:33:56,836
             'Kay.              

815
00:33:56,838 --> 00:33:57,770
     That's interesting and     

816
00:33:57,772 --> 00:34:00,873
 here's a big new thing for you 
            to see.             

817
00:34:00,875 --> 00:34:03,709
   You've read about it I, I    
        can't remember I        

818
00:34:03,711 --> 00:34:05,910
  even asked you to read about  
      this but I think I.       

819
00:34:05,912 --> 00:34:06,811
     No, I guess I didn't.      

820
00:34:06,813 --> 00:34:08,846
     Which is tuples, 'kay?     

821
00:34:08,848 --> 00:34:14,484
  So in Swift, you can combine  
    multiple things together    

822
00:34:14,486 --> 00:34:16,853
  into one kind of really te,   

823
00:34:16,855 --> 00:34:19,922
  mini data structure called a  
          tuple, 'kay?          

824
00:34:19,924 --> 00:34:22,124
 Don't let the tu [LAUGH] sound 
       in there fool you.       

825
00:34:22,126 --> 00:34:24,560
  It's not just two, it's any   
         number, okay?          

826
00:34:24,562 --> 00:34:26,762
   And you just put them in a   
       parentheses, okay?       

827
00:34:26,764 --> 00:34:28,664
      And, and that's it.       

828
00:34:28,665 --> 00:34:30,565
 So you can use this for return 
            values.             

829
00:34:30,567 --> 00:34:32,033
  So I've gotta function right  
             here,              

830
00:34:32,035 --> 00:34:34,735
 and I actually need to return  
 two things from this evaluate. 

831
00:34:35,771 --> 00:34:37,754
             'Kay?              
          One thing I           

832
00:34:37,755 --> 00:34:39,738
  need to return is the result  
      of a evaluating it.       

833
00:34:40,975 --> 00:34:43,042
     But the other thing I      

834
00:34:43,043 --> 00:34:45,110
 need to return is the rest of  
  the stack that I didn't use.  

835
00:34:45,112 --> 00:34:48,647
 Cuz as I'm working my way down 
    here and I take off that    

836
00:34:48,649 --> 00:34:52,884
  times, and the 4 and the 5,   
 okay, I'm consuming things but 

837
00:34:52,886 --> 00:34:54,652
  then I'm leaving the rest of  
         the stacks, so         

838
00:34:54,654 --> 00:34:56,920
    I have to keep returning    
   what's left of the stacks,   

839
00:34:56,922 --> 00:34:58,722
  while we keep consuming it.   

840
00:34:58,724 --> 00:34:59,689
             Okay?              

841
00:34:59,691 --> 00:35:01,958
 So, I'm gonna return this in a 
             tuple.             

842
00:35:01,960 --> 00:35:04,126
  Tuples could not be simpler   
            syntax,             

843
00:35:04,128 --> 00:35:08,097
   just open parentheses, not   
    nine, open parentheses.     

844
00:35:08,099 --> 00:35:11,066
 Open parentheses, and just all 
      the types that you,       

845
00:35:11,068 --> 00:35:12,634
   of things that you want in   
             here.              

846
00:35:12,636 --> 00:35:14,569
 So, I'm gonna return a double  
         question mark,         

847
00:35:14,571 --> 00:35:16,070
       that's my results.       

848
00:35:16,072 --> 00:35:17,683
             'Kay?              

849
00:35:17,684 --> 00:35:19,295
   That's what's eventually,    
            gonna be            

850
00:35:19,296 --> 00:35:20,907
  returned out here after all   
     the recursion unwinds.     

851
00:35:20,910 --> 00:35:23,643
   And then also I'm going to   

852
00:35:23,645 --> 00:35:28,348
   have the ops that are left   
             over.              

853
00:35:28,350 --> 00:35:32,851
  Now, a tuple could look just  
      like this, unnamed.       

854
00:35:32,853 --> 00:35:34,519
  Did you see how these things  
         are not named,         

855
00:35:34,521 --> 00:35:35,920
 each of these things in here.  

856
00:35:35,922 --> 00:35:38,956
 But you can also put names in  
 here as, if you want, as well. 

857
00:35:38,958 --> 00:35:41,092
 So maybe I would call this one 
          the result.           

858
00:35:42,061 --> 00:35:44,728
             Okay?              
              And               

859
00:35:44,729 --> 00:35:47,396
     I would call this one      
      remainingOps, 'kay?       

860
00:35:47,399 --> 00:35:49,666
 And I kinda recommend putting  
      those in there, and       

861
00:35:49,668 --> 00:35:52,601
   you'll see why in a second   
  because there's two ways to   

862
00:35:52,603 --> 00:35:56,138
 call a function that returns a 
   tuple and get the results.   

863
00:35:56,140 --> 00:36:00,208
  And one of the ways requires  
   that you name these, 'kay?   

864
00:36:00,210 --> 00:36:01,843
  So, it doesn't hurt to name   
    the, you might, as well.    

865
00:36:01,845 --> 00:36:03,111
    It's good documentation.    

866
00:36:03,113 --> 00:36:05,379
  Someone looking at this now   
        knows, oh, yeah,        

867
00:36:05,381 --> 00:36:07,147
   this is the result of the    
        evaluation, and         

868
00:36:07,149 --> 00:36:09,783
  these the ops that were left  
             over.              

869
00:36:09,785 --> 00:36:10,784
             'Kay?              

870
00:36:10,786 --> 00:36:13,419
           All right.           

871
00:36:13,421 --> 00:36:15,121
     So let's dive in here.     

872
00:36:15,123 --> 00:36:16,956
        The first thing,        

873
00:36:16,957 --> 00:36:18,790
 line of code I'm gonna put in  
    this recursive function     

874
00:36:18,793 --> 00:36:21,193
  is the failure line of code,  

875
00:36:21,195 --> 00:36:25,930
   which is return nil, ops,    
             okay?              

876
00:36:25,932 --> 00:36:28,566
 So if I fail, okay, I'm gonna  
            try and             

877
00:36:28,568 --> 00:36:33,303
 do my best in here to evaluate 
  these ops you passed me, but  

878
00:36:33,305 --> 00:36:36,272
    if I fail I'm just gonna    
    return my result of nil.    

879
00:36:36,274 --> 00:36:37,974
             'Kay?              

880
00:36:37,975 --> 00:36:39,675
 And that's gonna be my default 
      is to return nil so       

881
00:36:39,678 --> 00:36:40,643
        I know I failed.        

882
00:36:40,645 --> 00:36:42,344
  So, if I run out of operands  
               or               

883
00:36:42,346 --> 00:36:44,613
 I run out of stack can't find  
             it for             

884
00:36:44,615 --> 00:36:47,915
 example, it's just gonna fall  
    out here and return nil.    

885
00:36:49,152 --> 00:36:49,683
             Okay?              

886
00:36:49,685 --> 00:36:50,784
        So that's good.         

887
00:36:50,786 --> 00:36:52,619
 So, what do I need to do here? 

888
00:36:52,621 --> 00:36:56,089
 Well, first thing is I need to 
   make sure I have some ops.   

889
00:36:56,091 --> 00:36:59,859
  So I'm gonna check to see if  
     the ops is not empty.      

890
00:36:59,861 --> 00:37:04,529
  Okay, if you've handed me a   
 stack of no ops to evaluates,  

891
00:37:04,531 --> 00:37:05,463
        I can't do that.        

892
00:37:05,465 --> 00:37:06,698
 So I'm just gonna return nil.  

893
00:37:06,700 --> 00:37:07,615
             'Kay?              
               So               

894
00:37:07,616 --> 00:37:08,531
  that's the very first thing,  

895
00:37:08,534 --> 00:37:11,035
 I gotta make sure I have some  
       ops to work with.        

896
00:37:11,037 --> 00:37:14,237
 Now, I'm gonna grab the first  
      op of the stack, so       

897
00:37:14,239 --> 00:37:16,639
   in this example, I'm gonna   
    grab that x off of here.    

898
00:37:16,641 --> 00:37:17,206
             'Kay?              

899
00:37:17,208 --> 00:37:18,574
       I'm gonna do that,       

900
00:37:18,576 --> 00:37:24,012
  I'm gonna try to do that by   
   saying, let op equal ops.    

901
00:37:24,014 --> 00:37:26,114
  'Kay, ops is this argument,   
          right here.           

902
00:37:26,116 --> 00:37:28,483
 'Kay, that's the ops, you told 
         me to work on.         

903
00:37:28,485 --> 00:37:31,519
 And we know how to removeLast. 

904
00:37:31,521 --> 00:37:33,687
 Remember, removeLast from last 
             time?              

905
00:37:33,689 --> 00:37:36,156
 Removes the last thing off an  
             array.             

906
00:37:36,158 --> 00:37:38,992
 And when we are trying to make 
  an array look like a stack,   

907
00:37:38,994 --> 00:37:40,594
   that's how we do it, okay?   

908
00:37:40,595 --> 00:37:42,195
   We push things by putting    
 these on the end of the array. 

909
00:37:42,197 --> 00:37:44,196
  We pop things by, by pulling  
            it out.             

910
00:37:44,198 --> 00:37:45,431
 But you can see I got an error 
             there.             

911
00:37:45,433 --> 00:37:48,166
         [BLANK_AUDIO]          

912
00:37:48,168 --> 00:37:49,768
   And it's very important to   
        understand why I        

913
00:37:49,770 --> 00:37:50,835
   have an error here, okay?    

914
00:37:51,838 --> 00:37:53,704
   So I'm gonna click on it.    

915
00:37:53,706 --> 00:37:54,805
 We're gonna read what it says, 

916
00:37:54,807 --> 00:38:00,009
  it says, immutable value of   
       type array of op,        

917
00:38:00,011 --> 00:38:04,113
   only has a mutating member   
       named removeLast.        

918
00:38:04,115 --> 00:38:06,548
  Okay, well this is kind of a  
     formal way of saying,      

919
00:38:06,550 --> 00:38:13,221
 you can't do removeLast on ops 
   because ops is immutable.    

920
00:38:13,223 --> 00:38:14,455
        It's read-only.         

921
00:38:14,457 --> 00:38:15,556
     You cannot mutate it.      

922
00:38:15,558 --> 00:38:16,990
     You cannot change it.      

923
00:38:16,992 --> 00:38:20,160
  Okay, why is ops read-only?   

924
00:38:20,162 --> 00:38:23,063
  Well, there's two things to   
       think about here.        

925
00:38:23,065 --> 00:38:26,899
     One is, when you pass      
   arguments into functions,    

926
00:38:26,901 --> 00:38:29,702
    unless it's a class that    
        you're passing,         

927
00:38:29,704 --> 00:38:32,137
    unless you're passing an    
      instance of a class.      

928
00:38:32,139 --> 00:38:34,172
 The thing you pass is copied.  

929
00:38:34,174 --> 00:38:35,791
             'Kay?              

930
00:38:35,792 --> 00:38:37,409
     It's very important to     
        understand that,        

931
00:38:37,411 --> 00:38:38,876
    that's passed by value.     

932
00:38:38,878 --> 00:38:40,845
   You're used to it in other   
           languages,           

933
00:38:40,847 --> 00:38:43,313
  most languages do this, pass  
           by value.            

934
00:38:43,315 --> 00:38:46,516
  Arrays and dictionaries are   
          not classes.          

935
00:38:47,652 --> 00:38:49,952
 They're not classes in Swift.  

936
00:38:49,954 --> 00:38:50,886
        They're structs.        

937
00:38:50,888 --> 00:38:52,754
   You know, like a C struct?   

938
00:38:52,756 --> 00:38:53,955
             'Kay?              

939
00:38:53,957 --> 00:38:55,723
  Arrays and dictionaries are   
            structs.            

940
00:38:55,725 --> 00:38:58,759
  Structs in Swift look a lot   
         like classes.          

941
00:38:58,761 --> 00:39:00,594
      They have functions,      

942
00:39:00,595 --> 00:39:02,428
 they can even have properties  
       that have storage.       

943
00:39:02,431 --> 00:39:04,865
 They're almost identical to a  
         class, really.         

944
00:39:04,867 --> 00:39:09,102
 The only two huge differences  
  between structs and classes.  

945
00:39:09,104 --> 00:39:12,638
  One is that classes can have  
          inheritance.          

946
00:39:12,640 --> 00:39:15,274
   And structs cannot, okay?    

947
00:39:15,276 --> 00:39:20,745
 But number two is that structs 
    are passed by value and     

948
00:39:20,747 --> 00:39:25,049
     classes are passed by      
        reference, okay?        

949
00:39:25,051 --> 00:39:27,751
    Very important that you     
  understand that distinction.  

950
00:39:27,753 --> 00:39:30,687
  So structs are usually only   
        used for basic.         

951
00:39:30,689 --> 00:39:33,289
   You know, components like    
    arrays and dictionaries.    

952
00:39:33,291 --> 00:39:37,159
   Even doubles and ints are    
    structs in Swift, okay?     

953
00:39:37,161 --> 00:39:38,627
           >> [COUGH]           

954
00:39:38,628 --> 00:39:40,094
  >> And that's great because   
     that means doubles and     

955
00:39:40,097 --> 00:39:42,564
   ints can have functions on   
   them and things like that,   

956
00:39:42,566 --> 00:39:44,599
    which we will see as the    
        quarter goes by.        

957
00:39:44,601 --> 00:39:46,501
    But those things are all    
       passed by values.        

958
00:39:46,503 --> 00:39:48,669
  So that's the first thing to  
  understand is that this ops,  

959
00:39:48,671 --> 00:39:52,139
 when I call evaluate, whatever 
   array of ops I pass to it,   

960
00:39:52,141 --> 00:39:53,840
     it's gonna be copied.      

961
00:39:53,842 --> 00:39:55,108
             Okay?              

962
00:39:55,110 --> 00:39:57,643
 The second thing to understand 
  here is that they're kind of  

963
00:39:57,645 --> 00:40:03,682
  an implicit let in front of   
      all things you pass.      

964
00:40:03,684 --> 00:40:05,484
    In other words, they're     
           read-only.           

965
00:40:05,486 --> 00:40:06,651
          Make sense?           

966
00:40:06,653 --> 00:40:12,390
 And a read-only array can't be 
            mutated.            

967
00:40:12,392 --> 00:40:14,475
  I can't append things to it.  

968
00:40:14,476 --> 00:40:16,559
  You can't remove things from  
     it cuz it's read-only.     

969
00:40:16,562 --> 00:40:21,364
  Now, I can actually put the   
      word var here, okay?      

970
00:40:21,366 --> 00:40:22,999
          If I, sorry.          

971
00:40:23,001 --> 00:40:25,267
  If I put the word var here,   

972
00:40:25,269 --> 00:40:29,204
  then ops inside here look no  
             error.             

973
00:40:29,206 --> 00:40:32,674
    Ops is a mutable array.     

974
00:40:32,676 --> 00:40:34,575
   It's still a copy though.    

975
00:40:34,577 --> 00:40:36,711
   So they copied it, made it   
            mutable.            

976
00:40:36,713 --> 00:40:41,381
 And now inside here, I have a  
   mutable copy to work with.   

977
00:40:41,383 --> 00:40:45,084
   Now, I'm not a big fan of    
       doing that, 'kay?        

978
00:40:45,086 --> 00:40:46,118
      Putting var up here.      

979
00:40:46,120 --> 00:40:47,586
     I think it's a little      
         confusing for          

980
00:40:47,588 --> 00:40:49,221
      readers of the code,      

981
00:40:49,222 --> 00:40:50,855
  to understand exactly what's  
        going on there.         

982
00:40:50,858 --> 00:40:53,208
   So, I'm not gonna do that,   

983
00:40:53,209 --> 00:40:55,559
   instead, I'm gonna make a    
 local variable here, which I'm 

984
00:40:55,562 --> 00:41:00,865
  gonna call remainingOps and   
 I'm gonna set it equal to ops. 

985
00:41:00,867 --> 00:41:03,000
 Now, when you set equals like  
             this,              

986
00:41:04,103 --> 00:41:07,103
  that copies it if it's not a  
             class.             

987
00:41:07,105 --> 00:41:08,571
 Classes are all by reference.  

988
00:41:08,573 --> 00:41:09,438
  It's exactly, what you would  
             think.             

989
00:41:09,440 --> 00:41:10,539
          >> [COUGH].           
     >> But anything else,      

990
00:41:10,541 --> 00:41:12,808
  strucks or enums or anything  
             else.              

991
00:41:12,810 --> 00:41:14,543
    When you do equals here,    

992
00:41:14,544 --> 00:41:16,277
 this is actually going to make 
      a copy of this, and       

993
00:41:16,279 --> 00:41:17,895
        put it in here.         

994
00:41:17,896 --> 00:41:19,512
   And since it's a var, it's   
      going to be mutable.      

995
00:41:21,584 --> 00:41:23,083
             Okay?              

996
00:41:23,084 --> 00:41:24,583
 So now I have a mutable array  
          of opts and           

997
00:41:24,586 --> 00:41:26,519
  now I can say remainingOpts.  

998
00:41:26,521 --> 00:41:27,854
      Remove the last one.      

999
00:41:27,856 --> 00:41:30,122
  And now I truly do have the   
         remainingOpts.         

1000
00:41:30,124 --> 00:41:32,358
  I've removed the first thing  
           in there.            

1001
00:41:32,360 --> 00:41:35,594
         [BLANK_AUDIO]          

1002
00:41:35,596 --> 00:41:38,463
  Did everyone understand that  
      little tidbit there?      

1003
00:41:38,465 --> 00:41:39,464
             Yeah?              
        >> So there's a,        

1004
00:41:39,466 --> 00:41:42,800
  like a, a unseen let in sort  
          of the opts?          

1005
00:41:42,802 --> 00:41:43,600
            >> Yeah.            
   >> Why isn't that like in    

1006
00:41:43,602 --> 00:41:47,371
      front of doubles and      

1007
00:41:47,373 --> 00:41:48,672
   like ends or straightened    
           >> It is.            

1008
00:41:48,674 --> 00:41:50,873
   So, the question is why is   
  there not a kind of unseen,   

1009
00:41:50,875 --> 00:41:52,508
 let in front of all arguments? 

1010
00:41:52,510 --> 00:41:54,376
  Pretty much all arguments to  
       functions kind of        

1011
00:41:54,378 --> 00:41:55,577
 have that unseen let in there. 

1012
00:41:55,579 --> 00:41:57,545
   They're all read on, 'kay?   

1013
00:41:57,547 --> 00:41:59,681
  So and you could put var in   
      front of any one and      

1014
00:41:59,683 --> 00:42:02,516
 turn it into a mutable copy of 
              it,               

1015
00:42:02,518 --> 00:42:03,484
  that you could use locally.   

1016
00:42:03,486 --> 00:42:04,885
     But if you only use it     
            locally,            

1017
00:42:04,887 --> 00:42:06,219
  it's not that great a thing.  

1018
00:42:06,221 --> 00:42:08,371
             Okay?              

1019
00:42:08,372 --> 00:42:10,522
  Now, there is a way to have,  
  to pass by value things back  

1020
00:42:10,525 --> 00:42:13,959
  out, but I'm not even gonna   
        talk about that.        

1021
00:42:13,961 --> 00:42:14,726
             Okay.              

1022
00:42:14,728 --> 00:42:16,027
     You can read about it.     

1023
00:42:16,029 --> 00:42:17,328
    It's this in out thing.     

1024
00:42:18,698 --> 00:42:20,665
 I'm not even gonna talk about  
              it.               

1025
00:42:20,666 --> 00:42:22,633
 I really think it's better to  
     stay within the value,     

1026
00:42:22,635 --> 00:42:25,035
     pass by value, pass by     
     reference parameters.      

1027
00:42:25,037 --> 00:42:27,604
    I think you can get more    
    readable code that way.     

1028
00:42:27,606 --> 00:42:30,139
 But there is a way, there is a 
   way I'm not going to talk    

1029
00:42:30,141 --> 00:42:33,075
 about to do in out basically,  
 prime numbers that go in out.  

1030
00:42:33,077 --> 00:42:33,842
             Yeah.              

1031
00:42:33,844 --> 00:42:36,712
     >> Is there any way to     

1032
00:42:36,714 --> 00:42:39,180
          [INAUDIBLE]           

1033
00:42:39,182 --> 00:42:40,949
   >> Yeah that's what I just   
             said.              

1034
00:42:40,950 --> 00:42:42,717
 There is a way to pass it kind 
    of by reference in out.     

1035
00:42:42,719 --> 00:42:44,618
 You know, you pass it in, you  
           modify it,           

1036
00:42:44,620 --> 00:42:47,054
  and then it'll come back out  
   when it's done at the end.   

1037
00:42:47,056 --> 00:42:48,255
    So, it's kind of like by    
           reference.           

1038
00:42:49,224 --> 00:42:50,323
  But the other thing you said  
              is,               

1039
00:42:50,325 --> 00:42:52,558
 oh this is terrible I'm making 
        three copies of         

1040
00:42:52,560 --> 00:42:55,394
 that dang thing, this must be  
          super slow.           

1041
00:42:55,396 --> 00:42:57,029
     And the answer is no.      

1042
00:42:57,031 --> 00:43:01,599
 Swift is super smart about not 
      actually copying it,      

1043
00:43:01,601 --> 00:43:04,135
   until you actually make a    
         change to it.          

1044
00:43:04,137 --> 00:43:07,271
 So here when it passes a copy  
      in it didn't really       

1045
00:43:07,273 --> 00:43:10,073
 copy it, it just kinda passed  
 a pointer in but it knows that 

1046
00:43:10,075 --> 00:43:13,576
  pointer is by, you know, not  
  by reference it's by value.   

1047
00:43:13,578 --> 00:43:15,611
   And then when I copied it    
          again here.           

1048
00:43:15,613 --> 00:43:17,146
  It still didn't really copy   
              it.               

1049
00:43:17,148 --> 00:43:19,081
 Even if this array had 10,000  
         things in it,          

1050
00:43:19,083 --> 00:43:21,116
 it didn't make 10,000 copy of  
              it.               

1051
00:43:21,118 --> 00:43:25,019
    It was only here where I    
       actually mutated,        

1052
00:43:25,021 --> 00:43:26,120
   now it had to make a copy.   

1053
00:43:26,122 --> 00:43:28,989
 And it may not even have made  
        an entire copy.         

1054
00:43:28,991 --> 00:43:32,025
 It might have just kept track  
  of the changes, for example.  

1055
00:43:32,027 --> 00:43:33,860
  So, it's super smart behind   
          the scenes.           

1056
00:43:33,862 --> 00:43:34,861
      Sweet to very smart.      

1057
00:43:34,863 --> 00:43:36,862
   So, don't worry too, about   
         much about oh,         

1058
00:43:36,864 --> 00:43:38,630
 I'm copying these things over  
           and over.            

1059
00:43:38,632 --> 00:43:40,332
  Swift is making the minimum   
             out of             

1060
00:43:40,334 --> 00:43:41,433
    actual copying going on.    

1061
00:43:41,435 --> 00:43:42,600
             Okay?              

1062
00:43:42,602 --> 00:43:47,171
    All right, so now I have    
      remainingOpts here,       

1063
00:43:47,173 --> 00:43:49,840
  which truly are my remaining  
             opts.              

1064
00:43:49,842 --> 00:43:51,842
             'Kay.              
          Because I've          

1065
00:43:51,843 --> 00:43:53,843
  removed the top one, the x,   
          off the top.          

1066
00:43:53,845 --> 00:43:56,279
    So now I've got all the     
         remainingOps,          

1067
00:43:56,281 --> 00:43:59,181
  in this local variable here   
      called remainingOps.      

1068
00:43:59,183 --> 00:44:00,566
             Okay.              

1069
00:44:00,567 --> 00:44:01,950
  Now, what am I gonna do with  
   this op that I pulled off,   

1070
00:44:01,952 --> 00:44:03,218
    this one on the top, x?     

1071
00:44:03,220 --> 00:44:06,621
     Well I'm gonna get the     
     associated value from      

1072
00:44:06,623 --> 00:44:07,888
           the enum.            

1073
00:44:07,890 --> 00:44:11,792
             'Kay.              
 Either this or these or this.  

1074
00:44:11,794 --> 00:44:13,226
     And how do I do that?      

1075
00:44:13,228 --> 00:44:15,094
         I use Switch.          

1076
00:44:15,096 --> 00:44:17,496
  'Kay, I told you that Switch  
      is really important.      

1077
00:44:17,498 --> 00:44:20,032
   And now you're seeing that   
  Switch is really important.   

1078
00:44:20,034 --> 00:44:21,867
 Switch is how you pull things  
              out,              

1079
00:44:21,869 --> 00:44:23,668
    associated values out of    
             enums.             

1080
00:44:23,670 --> 00:44:25,036
  So I'm just gonna switch on   
            the op.             

1081
00:44:25,038 --> 00:44:27,772
  'Kay, this is the op that I   
      pulled off the top,       

1082
00:44:27,774 --> 00:44:30,708
  that x from the thing we did  
         on the board.          

1083
00:44:30,710 --> 00:44:32,109
 And I'm just gonna look at the 
           cases, so            

1084
00:44:32,111 --> 00:44:35,412
 I have the case operand, okay. 

1085
00:44:35,414 --> 00:44:38,581
  Notice that it puts a little  
     dot here because it's      

1086
00:44:38,583 --> 00:44:41,450
   really Op.Operand and it's   
    using type inference to     

1087
00:44:41,452 --> 00:44:43,652
   know that it's Op.Operand,   
             right.             

1088
00:44:43,654 --> 00:44:47,289
    Op.op, Op.Operand but it    
   doesn't need the op there.   

1089
00:44:47,291 --> 00:44:50,892
  And here it's asking in this  
  space, what do you wanna do   

1090
00:44:50,894 --> 00:44:54,628
  with the associated value if  
   you're handling this case.   

1091
00:44:54,630 --> 00:44:56,864
   Where the enum is operand.   

1092
00:44:56,866 --> 00:44:58,432
             'Kay?              

1093
00:44:58,434 --> 00:45:04,037
    Well I want to let that     
        associated value        

1094
00:45:04,039 --> 00:45:10,175
   be assigned to a constant    
        called operand.         

1095
00:45:10,177 --> 00:45:11,510
             'Kay?              

1096
00:45:11,512 --> 00:45:14,746
 And yes I could put var here,  
 which would do the same thing, 

1097
00:45:14,748 --> 00:45:17,715
 except for I could then change 
       the thing in here.       

1098
00:45:17,717 --> 00:45:20,685
  But I almost never wanna do   
    this, almost always let.    

1099
00:45:20,687 --> 00:45:23,887
   So let operand means that    
     inside the handling of     

1100
00:45:23,889 --> 00:45:27,157
 this case, 'kay, this case of  
          the switch.           

1101
00:45:27,159 --> 00:45:30,693
 Inside here, operand is gonna  
  have the associated value of  

1102
00:45:30,695 --> 00:45:31,427
          the operand.          

1103
00:45:32,430 --> 00:45:34,196
             'Kay?              

1104
00:45:34,198 --> 00:45:35,897
   Oh, that's exactly what I    
             want.              

1105
00:45:35,899 --> 00:45:38,599
  I'm just gonna return right   
   now I have to return this    

1106
00:45:38,601 --> 00:45:40,301
       tuple right here.        

1107
00:45:40,303 --> 00:45:42,569
   So I'm gonna returned the    
            operand.            

1108
00:45:42,571 --> 00:45:45,005
    That's the result, 'kay.    

1109
00:45:45,007 --> 00:45:47,191
       When I go here and       

1110
00:45:47,192 --> 00:45:49,376
 I encounter that next one down 
 which was a four, I got a four 

1111
00:45:49,378 --> 00:45:52,845
 I can just return that result  
     to evaluate this one.      

1112
00:45:52,847 --> 00:45:55,881
   And I also though have to    
    return the remainingOps.    

1113
00:45:57,018 --> 00:46:00,085
  'Kay, so I'm just returning   
 the two values of this tuple,  

1114
00:46:00,087 --> 00:46:02,754
   notice I don't have to put   
        result colon and        

1115
00:46:02,756 --> 00:46:06,390
 remaining opt colon in here it 
   knows that those match and   

1116
00:46:06,392 --> 00:46:07,224
    so it's still doing it.     

1117
00:46:07,226 --> 00:46:09,159
    All right, makes sense.     

1118
00:46:09,161 --> 00:46:13,763
  That's it for operand that's  
       all I have to do.        

1119
00:46:13,765 --> 00:46:15,064
     It's kind of a, in the     
           recursion,           

1120
00:46:15,066 --> 00:46:20,102
   it's kind of an end case.    

1121
00:46:20,104 --> 00:46:21,069
             Yeah?              
   >> Is remainingOps part of   

1122
00:46:21,071 --> 00:46:22,520
       the stack or heap?       

1123
00:46:22,521 --> 00:46:23,970
 >> This one here, or this one  
             here?              

1124
00:46:23,973 --> 00:46:24,989
       >> What in general       
          [INAUDIBLE].          

1125
00:46:24,990 --> 00:46:26,006
  >> Okay so, so the question   
              is,               

1126
00:46:26,009 --> 00:46:29,276
 when I do something like this, 
     where is remainingOps?     

1127
00:46:29,278 --> 00:46:30,377
       Is it in the heap?       

1128
00:46:30,379 --> 00:46:31,812
      Is it on the stack?       

1129
00:46:31,813 --> 00:46:33,246
    And the thing is, that's    
     implementation detail.     

1130
00:46:34,282 --> 00:46:36,148
  So, you, you don't know, but  
        you don't care.         

1131
00:46:38,018 --> 00:46:40,185
 All right, so that's operand.  

1132
00:46:40,187 --> 00:46:42,020
   Operand was really, really   
             easy.              

1133
00:46:42,022 --> 00:46:44,321
    How about our operation,    
        that's you, you,        

1134
00:46:44,323 --> 00:46:46,090
   UnaryOperation right here.   

1135
00:46:46,092 --> 00:46:49,659
 Now when we handle the case of 
      the unary operation,      

1136
00:46:49,661 --> 00:46:52,195
    we don't need that first    
       associated value,        

1137
00:46:52,197 --> 00:46:54,330
 that's the symbol, like plus.  

1138
00:46:54,332 --> 00:46:56,332
 Okay well I'm evaluating here  
     I don't care what this     

1139
00:46:56,334 --> 00:46:58,500
  symbol is, I only care what   
   the function is cause I'm    

1140
00:46:58,502 --> 00:47:00,002
  gonna evaluate the function.  

1141
00:47:00,004 --> 00:47:05,807
 So we can actually ignore this 
 by putting in underbar, 'kay?  

1142
00:47:05,809 --> 00:47:08,642
  Underbar in swift is kind of  

1143
00:47:08,644 --> 00:47:12,212
   the universal I don't care   
       about this thing.        

1144
00:47:12,214 --> 00:47:14,681
  Okay and we're gonna see it   
     other places we use it     

1145
00:47:14,683 --> 00:47:16,549
 where it's kinda like, I don't 
    really care about that.     

1146
00:47:16,551 --> 00:47:18,251
  So you just put an underbar   
             there.             

1147
00:47:18,253 --> 00:47:19,819
   That way you don't have to   
    declare a variable with     

1148
00:47:19,821 --> 00:47:22,221
  some dumb name or something   
           like that.           

1149
00:47:22,223 --> 00:47:24,389
    Just put an underbar it     
          ignores it.           

1150
00:47:24,391 --> 00:47:25,323
             'Kay?              

1151
00:47:25,324 --> 00:47:26,256
   But I do care about this.    

1152
00:47:26,259 --> 00:47:29,794
  I'm gonna let that equal the  
   operation that I'm doing.    

1153
00:47:29,796 --> 00:47:30,361
             'Kay?              

1154
00:47:31,397 --> 00:47:32,929
  Everyone, make sense there?   

1155
00:47:32,931 --> 00:47:34,897
  So I'm ignoring the string,   
              but               

1156
00:47:34,899 --> 00:47:36,699
  I'm grabbing the operation.   

1157
00:47:36,701 --> 00:47:40,402
  So here, what I wanna do is   
 return and I'll try to do it,  

1158
00:47:40,404 --> 00:47:41,370
 but I'm not gonna be able to.  

1159
00:47:41,372 --> 00:47:45,540
   I'm gonna say, return this   
         operation with         

1160
00:47:45,542 --> 00:47:48,342
   its operand which I don't    
             have.              

1161
00:47:48,344 --> 00:47:51,512
 And there's some remaining ops 
   that are leftover after I    

1162
00:47:51,514 --> 00:47:52,579
        get the operand.        

1163
00:47:52,581 --> 00:47:55,515
   So I'm kinda, I need to do   
       some stuff here to       

1164
00:47:55,517 --> 00:47:58,251
 be able to return what I want. 

1165
00:47:58,253 --> 00:48:01,053
  The first thing I need to do  
      is get the operand.       

1166
00:48:01,055 --> 00:48:03,689
             'Kay?              

1167
00:48:03,690 --> 00:48:06,324
  So, I did a unary operation   
 let's say it was square root.  

1168
00:48:06,326 --> 00:48:07,625
 I need to go back to the staff 
              and               

1169
00:48:07,627 --> 00:48:10,862
 pick off the next thing but I  
           can't just           

1170
00:48:10,864 --> 00:48:13,931
  assume that it's a number it  
  might be more operations so   

1171
00:48:13,933 --> 00:48:17,001
  I have to recurse, so here's  
 where the recursion comes in.  

1172
00:48:17,003 --> 00:48:20,103
 And I'm gonna show you how to  
      call a function that      

1173
00:48:20,105 --> 00:48:22,172
        returns a tuple.        

1174
00:48:22,174 --> 00:48:25,274
 And get it's value up so this  
  is important little example   

1175
00:48:25,276 --> 00:48:27,677
  here, so there's two ways to  
             do it.             

1176
00:48:27,679 --> 00:48:30,279
 I'm gonna do it one way here,  
           which is,            

1177
00:48:30,281 --> 00:48:32,881
         I'm gonna let          
       operandEvaluation,       

1178
00:48:32,883 --> 00:48:37,919
 which is just a local variable 
 that I'm inventing, equal call 

1179
00:48:37,921 --> 00:48:43,057
 evaluate with the remainingOps 
          that I have.          

1180
00:48:43,059 --> 00:48:45,025
  'Kay, so here I've recursed.  

1181
00:48:45,027 --> 00:48:46,459
      Okay, I'm recursing.      

1182
00:48:46,461 --> 00:48:48,661
      And I just set it to      
       operandEvaluation.       

1183
00:48:48,663 --> 00:48:51,564
 Now, let's look at the type of 
          this thing.           

1184
00:48:51,566 --> 00:48:55,300
 If I look at its type, you can 
     see that it's a tuple.     

1185
00:48:55,302 --> 00:48:56,468
        That's its type.        

1186
00:48:56,470 --> 00:48:58,770
      It's a tuple result       
         remainingOps.          

1187
00:48:58,772 --> 00:49:00,671
  It's this tuple right here.   

1188
00:49:00,673 --> 00:49:03,140
    That is the type of this    
       operandEvaluation.       

1189
00:49:04,309 --> 00:49:06,242
 So now that I have that tuple, 

1190
00:49:06,244 --> 00:49:09,245
 it's the result of evaluation  
  how do I get the result and   

1191
00:49:09,247 --> 00:49:13,716
   the remaining op out of it   
 well I can get the operand by  

1192
00:49:13,718 --> 00:49:19,621
 saying operand eval, [UNKNOWN] 
   operandEvaluation.result.    

1193
00:49:19,623 --> 00:49:21,423
             'Kay?              

1194
00:49:21,424 --> 00:49:23,224
 So that just pull this is the  
         tuple here I'm         

1195
00:49:23,226 --> 00:49:26,227
   getting this value of the    
      tuple out of there.       

1196
00:49:26,229 --> 00:49:27,461
     Now what type is this?     

1197
00:49:29,298 --> 00:49:29,863
            Anybody?            

1198
00:49:30,865 --> 00:49:31,931
       It's an optional.        

1199
00:49:31,932 --> 00:49:32,998
   You're pretty safe saying    
        optional when I         

1200
00:49:33,001 --> 00:49:34,099
  ask what type it is, aren't   
              you?              

1201
00:49:34,101 --> 00:49:35,801
     It's almost always an      
           optional.            

1202
00:49:35,803 --> 00:49:37,168
   Cuz I usually don't ask if   
           it's not.            

1203
00:49:37,170 --> 00:49:40,672
 But it is indeed an optional,  
      an optional double.       

1204
00:49:40,674 --> 00:49:42,707
   It's this type right here,   
             okay?              

1205
00:49:42,709 --> 00:49:46,043
  So we need to turn it into a  
 double if we're gonna pass it  

1206
00:49:46,045 --> 00:49:48,078
 to this operation right here.  

1207
00:49:48,080 --> 00:49:52,648
   So I'm gonna use if let to   
    turn that into a double.    

1208
00:49:52,650 --> 00:49:55,084
             'Kay?              

1209
00:49:55,085 --> 00:49:57,519
  Now, I can actually do this   
  because I have the operand.   

1210
00:49:57,521 --> 00:49:58,587
    Just got it right here.     

1211
00:49:58,589 --> 00:50:00,755
             'Kay?              
   This is now a double, see?   

1212
00:50:00,757 --> 00:50:04,125
 And I can call this operation  
          right here.           

1213
00:50:04,127 --> 00:50:06,327
 And this is the remaining ops, 
      but this has got to       

1214
00:50:06,329 --> 00:50:09,229
 be the remaining ops after we  
           recursed.            

1215
00:50:09,231 --> 00:50:13,233
 So it's gotta be the remaining 
 ops in this operandEvaluation. 

1216
00:50:13,235 --> 00:50:15,368
            So that             
  operandEvaluation.remaining-  

1217
00:50:15,370 --> 00:50:19,471
              Ops.              
   Everybody cool with that?    

1218
00:50:19,473 --> 00:50:21,206
         So that's it.          

1219
00:50:21,208 --> 00:50:25,343
   It's just recurse, we just   
   recursed to evaluate that.   

1220
00:50:25,345 --> 00:50:29,180
   If this fails if, if this    
    recursion returned nil,     

1221
00:50:29,182 --> 00:50:31,849
  then this is, this, if let's  
     not gonna happen this      

1222
00:50:31,851 --> 00:50:34,584
   return's not gonna happen,   
 gonna fall all the way out and 

1223
00:50:34,586 --> 00:50:37,454
  return nill which is what we  
          want, 'kay.           

1224
00:50:37,456 --> 00:50:39,522
    We failed in any of our     
     recursive attempts to      

1225
00:50:39,524 --> 00:50:40,756
   get the operands we need,    

1226
00:50:40,758 --> 00:50:42,825
  we gotta fail all the way up  
       to the top level.        

1227
00:50:42,827 --> 00:50:46,028
         [BLANK_AUDIO]          

1228
00:50:46,030 --> 00:50:48,063
   Okay now binary operation.   

1229
00:50:49,299 --> 00:50:52,466
   Also okay, let's do yeah,    
       binary here case.        

1230
00:50:53,535 --> 00:50:54,267
            Binary.             

1231
00:50:55,470 --> 00:50:57,570
   Obviously same exact thing   
             here.              

1232
00:50:57,572 --> 00:50:59,438
   We don't care about that.    

1233
00:50:59,440 --> 00:51:00,906
    And here we're gonna let    
           operation.           

1234
00:51:00,908 --> 00:51:03,708
 And we're gonna do the exactly 
     the same thing we did      

1235
00:51:03,710 --> 00:51:06,577
 here but we just have to do it 
   twice because we have two    

1236
00:51:06,579 --> 00:51:08,646
  operands to do here, through  
             here.              

1237
00:51:08,648 --> 00:51:15,052
 So let's let opp1Evaluation =  
    evaluate(remainingOps).     

1238
00:51:16,088 --> 00:51:17,487
             'Kay.              

1239
00:51:17,488 --> 00:51:18,887
     And then if we can let     
           operand1 =           

1240
00:51:18,890 --> 00:51:20,756
     op1Evaluation.result.      

1241
00:51:20,758 --> 00:51:23,625
 'Kay, then we got op1, that's  
             good.              

1242
00:51:23,627 --> 00:51:27,262
 So now let's let op2Evaluation 
               =                

1243
00:51:27,264 --> 00:51:32,600
 evaluation(op1Evaluation.rema- 
           iningOps).           

1244
00:51:32,602 --> 00:51:36,370
             'Kay?              

1245
00:51:36,371 --> 00:51:40,139
   And if we can let operand,   
  oops, if we can let operand2  

1246
00:51:40,142 --> 00:51:44,844
  = op2Evaluation.result, then  
             we can             

1247
00:51:44,846 --> 00:51:50,716
  return (operation(operand1,   
           operand2).           

1248
00:51:50,718 --> 00:51:53,185
             'Kay?              
              And               

1249
00:51:53,186 --> 00:51:55,653
           we'll have           
 op2Evaluation.remainingOps) as 

1250
00:51:55,656 --> 00:51:57,355
       our remaining ops.       

1251
00:51:57,357 --> 00:52:00,825
             Okay?              
         [BLANK_AUDIO]          

1252
00:52:00,827 --> 00:52:01,692
          Make sense?           

1253
00:52:01,694 --> 00:52:02,426
           All right.           
          What's our.           

1254
00:52:02,428 --> 00:52:03,159
     We have an error here.     

1255
00:52:03,161 --> 00:52:04,560
          What is it?           

1256
00:52:04,562 --> 00:52:05,695
             okay.              
             Yeah,              

1257
00:52:05,696 --> 00:52:06,829
 this is a good error to cover  
             here.              

1258
00:52:06,831 --> 00:52:09,665
  See this it says method must  
  be declared private because   

1259
00:52:09,667 --> 00:52:12,501
 this parameter uses a private  
             value.             

1260
00:52:12,503 --> 00:52:16,137
 And sure enough op is private  
   so this has to be private.   

1261
00:52:17,740 --> 00:52:19,273
             'Kay?              

1262
00:52:20,476 --> 00:52:21,875
     Now notice by the way,     

1263
00:52:21,877 --> 00:52:28,080
  I don't have default: break   
      here in this switch.      

1264
00:52:28,082 --> 00:52:30,215
  And why do I not have that?   

1265
00:52:30,217 --> 00:52:33,418
   Because I've handled every   
     possible value of op.      

1266
00:52:35,088 --> 00:52:35,986
             'Kay?              
         There are only         

1267
00:52:35,988 --> 00:52:37,254
       three kinds of op.       

1268
00:52:37,256 --> 00:52:38,522
     I've handled them all.     

1269
00:52:38,524 --> 00:52:40,374
  So I don't need any default.  

1270
00:52:40,375 --> 00:52:42,225
  It wasn't like in the other   
 one where we had a string and  

1271
00:52:42,227 --> 00:52:44,761
 we only handle a few strings,  
    we had a default break.     

1272
00:52:44,763 --> 00:52:47,863
 You don't put default break in 
  when you handle every thing.  

1273
00:52:47,865 --> 00:52:49,598
 And it's really bad programing 
            style to            

1274
00:52:49,600 --> 00:52:51,633
  put a default break in every  
         single switch.         

1275
00:52:51,635 --> 00:52:54,903
 'Kay, you should only put them 
    in on the ones where you    

1276
00:52:54,905 --> 00:52:58,373
 truly are breaking because you 
    can't handle every case.    

1277
00:52:58,375 --> 00:53:00,574
             'Kay?              
           All right.           

1278
00:53:00,576 --> 00:53:03,844
 Now, the last thing we have to 
 do is just call this recursive 

1279
00:53:03,846 --> 00:53:06,113
       version from here.       

1280
00:53:06,115 --> 00:53:08,782
  And I'm gonna call this one   
              and               

1281
00:53:08,784 --> 00:53:11,117
    get these tuple values a    
      little differently.       

1282
00:53:11,119 --> 00:53:12,718
  I'm not gonna call it in the  
         same way here.         

1283
00:53:12,720 --> 00:53:14,920
     I'm not gonna say, let     
        something equal.        

1284
00:53:14,922 --> 00:53:20,091
  Instead I'm gonna say let a   
 tuple which has let's call it  

1285
00:53:20,093 --> 00:53:24,062
   say (result, remainder) =    
          evaluate and          

1286
00:53:24,064 --> 00:53:28,666
    I'm gonna pass my whole     
     (opStack) here, okay.      

1287
00:53:28,668 --> 00:53:31,668
 So this is a different way to  
  call a function that returns  

1288
00:53:31,670 --> 00:53:35,305
 a tuple here you actually let  
   a tuple equal the result.    

1289
00:53:35,307 --> 00:53:37,974
  Instead of letting a single   
     thing equal result and     

1290
00:53:37,976 --> 00:53:42,111
 then using the dots to get it, 
 you let the tuple equal it and 

1291
00:53:42,113 --> 00:53:45,547
 notice that these names don't  
  have to be the same as these  

1292
00:53:45,549 --> 00:53:48,283
  names so result is the same,  
           but here I           

1293
00:53:48,285 --> 00:53:52,286
 use the word remainder instead 
   of the word remainingOps.    

1294
00:53:52,288 --> 00:53:53,754
  Okay they do not have to be   
           the same.            

1295
00:53:55,024 --> 00:54:00,694
  And then here we just return  
          our result.           

1296
00:54:00,696 --> 00:54:02,261
             Okay?              

1297
00:54:02,263 --> 00:54:04,163
   So we learned a lot right    
          there, okay.          

1298
00:54:04,165 --> 00:54:05,297
    We learned about tuple,     

1299
00:54:05,299 --> 00:54:08,033
  passing you know things back  
           tuples in            

1300
00:54:08,035 --> 00:54:13,237
 different ways you know how to 
   ignore things in enums and   

1301
00:54:13,239 --> 00:54:15,106
  when we're getting associate  
     values all that stuff.     

1302
00:54:15,108 --> 00:54:16,974
   So hopefully, you got all    
             that.              

1303
00:54:16,976 --> 00:54:19,676
 I see a few people still kinda 
  catching up on their typing.  

1304
00:54:19,678 --> 00:54:21,444
 So I'll break for second here. 

1305
00:54:21,446 --> 00:54:24,480
         [BLANK_AUDIO]          

1306
00:54:24,482 --> 00:54:27,283
  [SOUND] So that's it that's   
  the entire implementation of  

1307
00:54:27,285 --> 00:54:28,384
     our calculator brain.      

1308
00:54:28,386 --> 00:54:30,919
   It wasn't really that bad    
        actually, right?        

1309
00:54:30,921 --> 00:54:33,722
   Pretty simple little data    
        structure here.         

1310
00:54:33,724 --> 00:54:36,858
   Just have to say what our    
         known ops are.         

1311
00:54:36,860 --> 00:54:38,726
 And have this recursion which  
           you know,            

1312
00:54:38,728 --> 00:54:42,196
   actually is quite simple,    
         powerful code.         

1313
00:54:42,198 --> 00:54:44,031
 If you're not comfortable with 
        your recursion I        

1314
00:54:44,033 --> 00:54:46,533
   can see how it might be a    
     little bit disturbing.     

1315
00:54:46,535 --> 00:54:48,301
     But go stare at it for     

1316
00:54:48,302 --> 00:54:50,068
 awhile and you'll, you'll get  
       it, how it works.        

1317
00:54:50,071 --> 00:54:51,921
             Okay.              

1318
00:54:51,922 --> 00:54:53,772
  So, now that we've got this   
     new calculator brain,      

1319
00:54:53,775 --> 00:54:57,509
  we have to use it in our old  
          controller.           

1320
00:54:57,511 --> 00:54:59,678
      Okay, yeah question?      

1321
00:54:59,679 --> 00:55:01,846
 >> Do we have to let like the  
 op stack equal the remainder?  

1322
00:55:01,848 --> 00:55:04,549
  >> Do we have to let the op   
   stack equal the remainder?   

1323
00:55:04,551 --> 00:55:05,349
        Here, you mean?         

1324
00:55:05,351 --> 00:55:05,916
            >> Yeah.            

1325
00:55:07,119 --> 00:55:08,418
  >> well, we're not gonna use  
         remainder, so          

1326
00:55:08,420 --> 00:55:10,620
  actually, even I could put I  
        don't care here.        

1327
00:55:10,622 --> 00:55:13,255
   I only put that remainder    
  there to show you could have  

1328
00:55:13,257 --> 00:55:15,257
 a different name, but I'm not  
      using the remainder.      

1329
00:55:15,259 --> 00:55:16,892
    I only want the result.     

1330
00:55:16,894 --> 00:55:19,861
            You see.            
 >> Won't the op stack contain  

1331
00:55:19,862 --> 00:55:22,829
   what was previously in it    
    before you evaluate it?     

1332
00:55:22,832 --> 00:55:25,016
  >> Yes, the op stack will be  

1333
00:55:25,017 --> 00:55:27,201
 unaffected by this because op  
       stack is an array.       

1334
00:55:27,203 --> 00:55:28,702
 Arrays are passed by value so  

1335
00:55:28,704 --> 00:55:30,837
 a copy of it gets passed into  
             here.              

1336
00:55:30,839 --> 00:55:33,506
 So this would be untouched and 
     which is what I want.      

1337
00:55:33,508 --> 00:55:36,242
    I don't want evaluate to    
      consume my op stack.      

1338
00:55:36,244 --> 00:55:38,010
    I wanna be able to call     
       evaluate over and        

1339
00:55:38,012 --> 00:55:38,744
         over and over.         

1340
00:55:38,746 --> 00:55:39,945
             'Kay?              
         Especially if,         

1341
00:55:39,947 --> 00:55:43,581
     I let's say introduced     
     variable operands and      

1342
00:55:43,583 --> 00:55:45,550
  that's what you're homeworks  
   gonna be, then I wouldn't    

1343
00:55:45,552 --> 00:55:47,685
  want to change the variables  
    to different things and     

1344
00:55:47,687 --> 00:55:49,520
     be calling it over and     

1345
00:55:49,521 --> 00:55:51,354
 over with different values for 
  the variable for example and  

1346
00:55:51,357 --> 00:55:53,690
   then maybe next week I can   
  have an assignment where I'm  

1347
00:55:53,692 --> 00:55:57,894
  gonna make your graph such a  
 thing, which I'm going to do.  

1348
00:55:57,896 --> 00:55:59,012
             Okay?              

1349
00:55:59,013 --> 00:56:00,129
 So that's why I wanna do that. 

1350
00:56:00,131 --> 00:56:02,131
   So anyway, yeah, remainder   
   here can just be anything.   

1351
00:56:02,133 --> 00:56:03,532
  I'm actually gonna put this   
       here because we're       

1352
00:56:03,534 --> 00:56:05,300
   gonna print one this in a    
         second just so         

1353
00:56:05,302 --> 00:56:06,567
  we can get a better look at   
        what's going on.        

1354
00:56:06,569 --> 00:56:10,904
  But first, let's go back to   
  our controller and use this   

1355
00:56:10,906 --> 00:56:14,007
  calculator brain, this nice   
    model we just invented.     

1356
00:56:14,009 --> 00:56:15,842
         Let's use it.          
              Now,              

1357
00:56:15,843 --> 00:56:17,676
 I'm gonna show you how to get  
    two things on screen at     

1358
00:56:17,679 --> 00:56:18,644
         the same time.         

1359
00:56:18,646 --> 00:56:20,880
    That aren't necessarily     
       directly related.        

1360
00:56:20,882 --> 00:56:23,549
 Before we have the story board 
     and then I went up and     

1361
00:56:23,551 --> 00:56:25,784
   clicked this system editor   
         right here and         

1362
00:56:25,786 --> 00:56:27,319
  it showed me the controller.  

1363
00:56:27,320 --> 00:56:28,853
   Because the system editor    
     figured out that, oh,      

1364
00:56:28,855 --> 00:56:30,388
 if you have the story board up 
       you probably want        

1365
00:56:30,390 --> 00:56:33,257
  the controller for the scene  
       you have selected.       

1366
00:56:33,259 --> 00:56:34,992
  But here it's like, I don't   
     know what to show you.     

1367
00:56:34,994 --> 00:56:36,827
    So I'm gonna show you a     
        different way to        

1368
00:56:36,829 --> 00:56:39,229
   get something in here, two   
         ways actually.         

1369
00:56:39,231 --> 00:56:41,931
  One is if you go to this top  
           bar where            

1370
00:56:41,933 --> 00:56:44,667
 it says counterparts, you can  
         mouse down and         

1371
00:56:44,669 --> 00:56:47,603
   you can find all kinds of    
       things about this        

1372
00:56:47,605 --> 00:56:50,272
 like subclasses of this class  
          on the left.          

1373
00:56:51,341 --> 00:56:54,642
 Superclasses of this [UNKNOWN] 
       class on the left.       

1374
00:56:54,644 --> 00:56:57,111
      Of course it has no       
  superclasses or subclasses.   

1375
00:56:57,113 --> 00:57:00,547
  But other things, things it   
  includes are included by it.  

1376
00:57:00,549 --> 00:57:02,115
 You can also just manually go  
              in.               

1377
00:57:02,117 --> 00:57:03,283
    We can go over here for     
          example and           

1378
00:57:03,285 --> 00:57:06,152
  find our view controller and  
    load it up that way, but    

1379
00:57:06,154 --> 00:57:09,088
 I'm gonna show you a different 
      way than doing that       

1380
00:57:09,090 --> 00:57:11,423
  which is to go over here to   
        your navigator.         

1381
00:57:11,425 --> 00:57:14,893
  If you hold down Option and   
            press on            

1382
00:57:14,895 --> 00:57:18,663
 a file like ViewController it  
   will appear on the right.    

1383
00:57:18,665 --> 00:57:20,464
             'Kay?              

1384
00:57:20,466 --> 00:57:22,866
 So Option clicking in here is  
      another good way to       

1385
00:57:22,868 --> 00:57:23,767
    put things on the right.    

1386
00:57:25,437 --> 00:57:27,320
             Okay?              

1387
00:57:27,321 --> 00:57:29,204
    So now here we have our     
  calculator brain on the left  

1388
00:57:29,207 --> 00:57:31,040
 and we have our controller on  
           the right,           

1389
00:57:31,042 --> 00:57:34,943
 we are going to rip out all of 
        the stuff in our        

1390
00:57:34,945 --> 00:57:39,180
 controller that had to do with 
       being calculator.        

1391
00:57:39,182 --> 00:57:41,716
 Okay, so that's all this stuff 
         right in here.         

1392
00:57:41,718 --> 00:57:43,484
             'Kay.              

1393
00:57:43,485 --> 00:57:45,251
 All this calculating stuff, we 
     don't need any of this     

1394
00:57:45,254 --> 00:57:47,254
 because those were only called 
          from there.           

1395
00:57:47,256 --> 00:57:49,022
   'Kay, so our controller's    
     getting quite simple,      

1396
00:57:49,024 --> 00:57:50,757
   our controller hardly has    
      anything left in it.      

1397
00:57:50,759 --> 00:57:54,727
 And that's because the UI only 
  needs this to be controlled.  

1398
00:57:54,729 --> 00:57:56,579
             'Kay?              

1399
00:57:56,580 --> 00:57:58,430
 We also don't need our operand 
   stack because the brain is   

1400
00:57:58,432 --> 00:58:00,766
         gonna do that.         

1401
00:58:00,767 --> 00:58:03,101
   However, we do need a new    
     instance variable here     

1402
00:58:03,103 --> 00:58:04,903
 which is the calculator brain. 

1403
00:58:05,905 --> 00:58:07,838
 Okay I'm just gonna create one 
           like that,           

1404
00:58:07,840 --> 00:58:12,676
 this is extremely common okay  
            this is             

1405
00:58:12,678 --> 00:58:16,680
 the green arrow that goes from 
  the controller to the model.  

1406
00:58:16,682 --> 00:58:18,948
 Remember that in our MVC talk  
     that I did last time I     

1407
00:58:18,950 --> 00:58:21,584
 said that the controller has a 
   green arrow to the model,    

1408
00:58:21,586 --> 00:58:24,386
 it can talk to it all at once, 
     say anything it wants.     

1409
00:58:24,388 --> 00:58:26,922
 This is essentially that green 
             arrow.             

1410
00:58:26,924 --> 00:58:29,591
 This is our model right here.  

1411
00:58:29,593 --> 00:58:31,592
   And this is the controller   
   this is how the controller   

1412
00:58:31,594 --> 00:58:33,661
 talks to it through this thing 
       we call the brain.       

1413
00:58:33,663 --> 00:58:35,562
 Thing you can call it anything 
          you want and          

1414
00:58:35,564 --> 00:58:38,298
  of course this might be much  
 more complicated green arrow,  

1415
00:58:38,300 --> 00:58:40,767
 it might be a network database 
  that is connecting to you to  

1416
00:58:40,769 --> 00:58:41,934
         get the data.          

1417
00:58:41,936 --> 00:58:43,102
             Okay?              

1418
00:58:43,104 --> 00:58:45,671
 But in our case it's this very 
      simple little brain.      

1419
00:58:45,673 --> 00:58:47,206
             Okay.              

1420
00:58:47,207 --> 00:58:48,740
   So now we don't need this    
       either down here.        

1421
00:58:48,742 --> 00:58:51,343
 This is where we're appending  
     onto the op stack and      

1422
00:58:51,345 --> 00:58:52,044
        printing it out.        

1423
00:58:52,045 --> 00:58:52,744
     So we don't need that.     

1424
00:58:52,746 --> 00:58:57,548
   But we do need an enter to   
     push the operand onto      

1425
00:58:57,550 --> 00:58:58,615
           the stack.           

1426
00:58:59,718 --> 00:59:00,516
             Okay.              

1427
00:59:00,518 --> 00:59:03,519
  So here I'm just gonna say,   

1428
00:59:03,521 --> 00:59:08,657
  that I'm gonna say I'm just   
             gonna              

1429
00:59:08,659 --> 00:59:13,561
 say brain.pushOperand(display) 
             value.             

1430
00:59:13,563 --> 00:59:15,413
             'Kay?              

1431
00:59:15,414 --> 00:59:17,264
  That's the main thing I need  
    to do, is just do that.     

1432
00:59:17,266 --> 00:59:21,902
  One thing though is, I also   
   need to update my display.   

1433
00:59:21,904 --> 00:59:23,870
    Because when I push this    
            operand,            

1434
00:59:23,872 --> 00:59:25,672
 that's gonna change the brain. 

1435
00:59:25,674 --> 00:59:28,341
 I need to call that evaluate,  
             right?             

1436
00:59:28,343 --> 00:59:29,442
       And get the value.       

1437
00:59:29,443 --> 00:59:30,542
 So I could call evaluate here, 
              but               

1438
00:59:30,544 --> 00:59:34,613
 actually, I'm gonna go back to 
 my brain, and I'm gonna change 

1439
00:59:34,615 --> 00:59:39,484
 pushOperand to return the va,  
   the result of evaluating.    

1440
00:59:39,486 --> 00:59:42,486
         Typing today.          

1441
00:59:43,789 --> 00:59:46,623
    From it, from its, from     
         internally, so         

1442
00:59:46,625 --> 00:59:48,991
   I'm gonna return evaluate    
             here.              

1443
00:59:48,993 --> 00:59:50,593
 So that every time you push an 
            operand,            

1444
00:59:50,595 --> 00:59:52,127
     it'll just return the      
          evaluation.           

1445
00:59:52,129 --> 00:59:55,163
  Now one could argue whether   
 this is the best thing to do.  

1446
00:59:55,165 --> 00:59:57,932
  Because, you know, you might  
      not be interested in      

1447
00:59:57,934 --> 01:00:00,568
 the result of evaluating that  
           right now.           

1448
01:00:00,570 --> 01:00:03,671
   But it kind of feels to me   
         kind of good.          

1449
01:00:03,673 --> 01:00:05,339
     And it's not gonna be,     

1450
01:00:05,341 --> 01:00:07,341
 there's not gonna be that many 
      things on the stack.      

1451
01:00:07,343 --> 01:00:10,143
 You're not gonna usually have  
        calculator brain        

1452
01:00:10,145 --> 01:00:12,712
   have 1,000 operations and    
 operands, although you could.  

1453
01:00:12,714 --> 01:00:14,013
  But you're not usually going  
             to so              

1454
01:00:14,015 --> 01:00:16,548
      it's probably not a       
       performance issue.       

1455
01:00:16,550 --> 01:00:19,751
  To have it just return this   
 and it'll make caller's code,  

1456
01:00:19,753 --> 01:00:22,320
    you know, look a little     
            simpler.            

1457
01:00:22,322 --> 01:00:24,522
  And if they don't want this   
         return value,          

1458
01:00:25,858 --> 01:00:27,808
 then they can just ignore it.  

1459
01:00:27,809 --> 01:00:29,759
 They don't have to use it but  
       I am gonna use it.       

1460
01:00:29,762 --> 01:00:31,495
  So, when I push this operand  
          right here,           

1461
01:00:31,497 --> 01:00:35,798
  I'm gonna say, I'm gonna if   
  let the results equal that.   

1462
01:00:36,734 --> 01:00:38,000
     Okay, because it's an      
           optional.            

1463
01:00:39,036 --> 01:00:41,836
  And if it's not nil then I'm  
             gonna              

1464
01:00:41,838 --> 01:00:43,671
  set the display value to the  
            result.             

1465
01:00:43,673 --> 01:00:46,140
 So in other words, every time  
       I push an operand,       

1466
01:00:46,142 --> 01:00:49,343
 I'm gonna up my display value  
      with the evaluation.      

1467
01:00:49,345 --> 01:00:50,811
          Make sense?           

1468
01:00:50,813 --> 01:00:53,446
 Okay, what if this comes back  
              nil?              

1469
01:00:54,982 --> 01:00:56,615
    So, I push something on,    

1470
01:00:56,617 --> 01:00:59,151
    this is not gonna happen    
  probably with Push Operand,   

1471
01:00:59,153 --> 01:01:02,587
  but it might, and after your  
       homework it might.       

1472
01:01:02,589 --> 01:01:04,022
   So, what if I push and it    
        comes back nil?         

1473
01:01:04,024 --> 01:01:07,258
   Well, now I'm kinda stuck,   
             okay?              

1474
01:01:07,260 --> 01:01:10,728
 This is why, in your homework  
  assignment, I suggested, wow  

1475
01:01:10,730 --> 01:01:13,730
 wouldn't it be cool if display 
    value took an optional.     

1476
01:01:15,100 --> 01:01:17,600
  Right, if display value took  
   and returned an optional.    

1477
01:01:17,602 --> 01:01:20,769
    You could put something     
  sensible in the display when  

1478
01:01:20,771 --> 01:01:23,605
     you had something that     
     couldn't be evaluated.     

1479
01:01:23,607 --> 01:01:25,874
  So in assignment two making   
       display value into       

1480
01:01:25,876 --> 01:01:27,809
    an optional is gonna be     
         required task.         

1481
01:01:27,811 --> 01:01:29,977
 So you might as well do it for 
         homework one,          

1482
01:01:29,979 --> 01:01:33,447
 cuz you're gonna have to do it 
    for homework two anyway.    

1483
01:01:33,449 --> 01:01:35,182
             Okay.              

1484
01:01:35,183 --> 01:01:36,916
  Just wanted to give you more  
     time because I didn't      

1485
01:01:36,917 --> 01:01:38,650
  really teach you the things   
   about NumberFormatter and    

1486
01:01:38,653 --> 01:01:41,320
  stuff in time for assignment  
              one.              

1487
01:01:41,322 --> 01:01:44,623
 But it's going to be required  
 and that's because the best I  

1488
01:01:44,625 --> 01:01:48,093
    can do here is maybe say    
   display value equals zero.   

1489
01:01:48,095 --> 01:01:50,962
 That's really lame but that's  
       the best I can do.       

1490
01:01:50,964 --> 01:01:54,432
  I really wanna say, display   
      value was nil, okay.      

1491
01:01:54,434 --> 01:01:56,634
    I really just wanna set     
     display value equal to     

1492
01:01:56,636 --> 01:01:58,953
      the result of this.       

1493
01:01:58,954 --> 01:02:01,271
   And I wanna have nil, you    
 know, clear out my display or  

1494
01:02:01,274 --> 01:02:02,606
       in assignment two,       

1495
01:02:02,608 --> 01:02:06,743
 extra credit, maybe it puts an 
  error message in my display.  

1496
01:02:07,912 --> 01:02:09,545
  Now that's extra credit, but  

1497
01:02:09,547 --> 01:02:11,246
  that would be an even better  
      thing to put there.       

1498
01:02:12,216 --> 01:02:14,216
             Okay?              

1499
01:02:14,217 --> 01:02:16,217
    But same thing for, for     
     forming the operation.     

1500
01:02:16,219 --> 01:02:17,652
   Here's our operation right   
             here.              

1501
01:02:17,654 --> 01:02:21,005
    And I'm just gonna say,     

1502
01:02:21,006 --> 01:02:24,357
 if I can let the result equal  
  brains perform operation of   

1503
01:02:24,360 --> 01:02:27,361
  the operation that I got off  
 the button, then I'm going to  

1504
01:02:27,363 --> 01:02:29,963
   let my display value equal   
          that result.          

1505
01:02:31,366 --> 01:02:34,667
 Otherwise I'm going to do the  
       very lame thing of       

1506
01:02:34,669 --> 01:02:38,904
  saying display value equals,  
   whoops, value equals zero.   

1507
01:02:38,906 --> 01:02:40,389
             Okay?              
            Unders,             

1508
01:02:40,390 --> 01:02:41,873
  people understand why that's  
         kind of lame?          

1509
01:02:41,875 --> 01:02:43,240
           All right.           

1510
01:02:45,644 --> 01:02:47,077
             Okay.              

1511
01:02:47,079 --> 01:02:48,144
         So that's it.          

1512
01:02:48,146 --> 01:02:49,812
     Look at how simple our     
      controller is here.       

1513
01:02:49,814 --> 01:02:52,481
  It has almost no code in it,  
             okay.              

1514
01:02:52,483 --> 01:02:54,550
 And that's really iOS is great 
          about that.           

1515
01:02:54,552 --> 01:02:56,885
 It really is pretty good about 
          making it so          

1516
01:02:56,887 --> 01:02:58,920
   that you can build your UI   
     mostly graphically so      

1517
01:02:58,922 --> 01:03:01,923
 that there's very little code  
  to control what's going on.   

1518
01:03:01,925 --> 01:03:03,491
    And then even our model,    

1519
01:03:03,493 --> 01:03:05,759
   which is a pretty powerful   
     calculator right now,      

1520
01:03:05,761 --> 01:03:07,961
 we could add as many functions 
        as we wanted to.        

1521
01:03:07,963 --> 01:03:09,963
   It's just one liners here.   

1522
01:03:09,965 --> 01:03:13,766
  And it would be capable of,   
  you know, evaluating any se,  

1523
01:03:13,768 --> 01:03:15,334
     series of them that's      
          evaluatable.          

1524
01:03:15,336 --> 01:03:18,003
   And it's also set up to do   
      your homework, okay,      

1525
01:03:18,005 --> 01:03:19,738
     which is to add those      
           variables,           

1526
01:03:19,740 --> 01:03:22,140
  to be able to push operands   
      that are variables.       

1527
01:03:22,142 --> 01:03:25,309
 The other thing your homework  
  is gonna ask you to do is to  

1528
01:03:25,311 --> 01:03:28,112
   eval, to draw this, okay,    

1529
01:03:28,114 --> 01:03:30,848
 the contents of it in a human  
         readable form.         

1530
01:03:30,850 --> 01:03:33,850
 Using infix notation like this 
     with parentheses when      

1531
01:03:33,852 --> 01:03:36,019
  necessary, things like that   
              and               

1532
01:03:36,021 --> 01:03:37,820
  that's gonna be a lot easier  
           here too.            

1533
01:03:37,822 --> 01:03:39,055
       Cuz you can recur,       

1534
01:03:39,056 --> 01:03:40,289
  use recursion, use recursion  
     to build this as well.     

1535
01:03:41,559 --> 01:03:43,725
  Okay, so that's the main two  
           things of            

1536
01:03:43,727 --> 01:03:44,693
 your homework that's what they 
              are.              

1537
01:03:44,695 --> 01:03:48,496
 All right, so let's see if we  
 broke anything here all right, 

1538
01:03:48,498 --> 01:03:50,064
 so we're gonna go up here and  
              run.              

1539
01:03:52,168 --> 01:03:53,834
  See if this all still works.  

1540
01:03:53,836 --> 01:03:55,101
    Our UI has not changed.     

1541
01:03:55,103 --> 01:03:57,804
 You notice I never even opened 
      the storyboard here.      

1542
01:03:57,806 --> 01:03:59,005
      Didn't even open the      
          storyboard.           

1543
01:03:59,007 --> 01:04:01,607
  Okay all these changes were   
     pushing things out of      

1544
01:04:01,609 --> 01:04:03,175
 the controller into the model. 

1545
01:04:03,177 --> 01:04:04,510
             Okay?              
            The co,             

1546
01:04:04,511 --> 01:04:05,844
   communication between the    
         controller and         

1547
01:04:05,846 --> 01:04:08,012
 the view has not changed here. 

1548
01:04:08,014 --> 01:04:10,915
   So hopefully this is gonna   
     work let's try 85, and     

1549
01:04:10,917 --> 01:04:13,083
  our number entering is still  
           working in           

1550
01:04:13,085 --> 01:04:15,252
  our controller that's good,   
             Enter.             

1551
01:04:15,254 --> 01:04:17,921
  Okay it still says 85 that's  
             good,              

1552
01:04:17,923 --> 01:04:22,224
   how about 41 plus seems to   
      actually be working.      

1553
01:04:22,226 --> 01:04:23,325
          Square root,          

1554
01:04:23,327 --> 01:04:26,861
   that's also working, nine    
       times, excellent.        

1555
01:04:26,863 --> 01:04:28,813
        That's working.         

1556
01:04:28,814 --> 01:04:30,764
  Now what if we do something   
    that's not evaluatable?     

1557
01:04:30,767 --> 01:04:33,034
   I'm going to press times a   
     whole bunch of times.      

1558
01:04:33,036 --> 01:04:33,901
             Right?             
         Times, times.          

1559
01:04:33,903 --> 01:04:35,736
      Oh, times no, zero.       

1560
01:04:35,738 --> 01:04:37,404
  See that's not really great   
           feedback.            

1561
01:04:37,406 --> 01:04:41,207
             Okay?              
 But, it's not really zero but  

1562
01:04:41,209 --> 01:04:43,642
  it's, it's not good either.   

1563
01:04:43,644 --> 01:04:46,912
  So your homework is going to  
   be printing out what's on    

1564
01:04:46,914 --> 01:04:48,747
  the stack in a nice form so   

1565
01:04:48,749 --> 01:04:50,548
 you'll be able to see that you 
       have times, times,       

1566
01:04:50,550 --> 01:04:53,918
 times, and it's gonna equal a  
         blank display.         

1567
01:04:53,920 --> 01:04:56,353
  And that's gonna make sense   
        that it's blank.        

1568
01:04:56,355 --> 01:04:57,020
             'Kay?              

1569
01:04:57,022 --> 01:04:59,422
           All right.           

1570
01:04:59,424 --> 01:05:01,724
   Now, I wanna do one other    
  thing here, though, just so   

1571
01:05:01,726 --> 01:05:03,659
    you can really visualize    
        what's going on,        

1572
01:05:03,661 --> 01:05:05,561
  which is, I wanna print out,  

1573
01:05:05,563 --> 01:05:08,630
   when we evaluate, I wanna    
     print out this stack.      

1574
01:05:08,632 --> 01:05:10,265
  I wanna print out the thing   
       we're evaluating,        

1575
01:05:10,267 --> 01:05:12,934
 I wanna print out the result,  
   and I even wanna print out   

1576
01:05:12,936 --> 01:05:14,702
  the remainder here so we can  
      see what's going on.      

1577
01:05:14,704 --> 01:05:17,471
   So, I wanna say print ln.    

1578
01:05:17,473 --> 01:05:21,841
  And I'm gonna say I'm gonna   
  use my backslash thing here.  

1579
01:05:21,843 --> 01:05:30,916
  Op stack equals result with   
      how did I say this?       

1580
01:05:30,918 --> 01:05:32,685
    With [NOISE], oh, yeah.     

1581
01:05:32,687 --> 01:05:36,688
 With our remainder left over.  

1582
01:05:37,857 --> 01:05:39,507
             Okay.              

1583
01:05:39,508 --> 01:05:41,158
  So wouldn't it be cool if I   
      could just do this.       

1584
01:05:41,160 --> 01:05:44,361
  Just say, okay, the op stack  
     evaluated equals this      

1585
01:05:44,363 --> 01:05:47,064
 result with the remainder left 
             over.              

1586
01:05:47,066 --> 01:05:47,897
             Okay?              

1587
01:05:47,899 --> 01:05:48,765
        Let's run that.         

1588
01:05:48,766 --> 01:05:49,632
  Do you think that's going to  
             work?              

1589
01:05:51,302 --> 01:05:52,468
             Maybe.             
           Let's see.           

1590
01:05:52,470 --> 01:05:54,336
         [BLANK_AUDIO]          

1591
01:05:54,338 --> 01:05:56,204
             Okay.              

1592
01:05:56,205 --> 01:05:58,071
 So let's try putting eight on  
           the stack.           

1593
01:05:59,709 --> 01:06:01,375
             Okay?              

1594
01:06:01,376 --> 01:06:03,042
 Let's make so we can see this  
    over here, where is it,     

1595
01:06:03,045 --> 01:06:06,213
    it's this probably right    
      there, there it is.       

1596
01:06:06,215 --> 01:06:08,114
  We don't need that one okay,  
               so               

1597
01:06:08,116 --> 01:06:11,117
 here is our okay it's gonna be 
        that, it's this.        

1598
01:06:11,119 --> 01:06:16,288
 Okay, so it said here hm, enum 
 value in, in an array, equals  

1599
01:06:16,290 --> 01:06:21,860
  result of optional 8, that's  
   good, optional 8 is good.    

1600
01:06:21,862 --> 01:06:23,161
    With nothing left over.     

1601
01:06:23,163 --> 01:06:24,962
       Okay, that's good.       

1602
01:06:24,964 --> 01:06:26,397
       Let's go 6, Enter.       

1603
01:06:26,399 --> 01:06:30,734
  Oh, now we have enum enum on  
  the stack equals optional 6,  

1604
01:06:30,736 --> 01:06:32,602
      with enum left over.      

1605
01:06:32,604 --> 01:06:33,936
    Well that's not so good.    

1606
01:06:33,938 --> 01:06:38,807
 Times enum, enum, enum equals  
   it with, this is terrible.   

1607
01:06:38,809 --> 01:06:40,342
  This is, I can't understand   
        what the heck is        

1608
01:06:40,344 --> 01:06:41,342
         going on here.         

1609
01:06:41,344 --> 01:06:42,943
     Why is this happening?     

1610
01:06:42,945 --> 01:06:47,014
  Okay, when you put something  
   in parentheses like this,    

1611
01:06:47,016 --> 01:06:49,315
  it tries to convert it to a   
            string.             

1612
01:06:49,317 --> 01:06:51,718
 Okay, well the thing that's in 
       here is an array.        

1613
01:06:51,720 --> 01:06:54,520
   Arrays know how to convert   
     themselves to strings.     

1614
01:06:54,522 --> 01:06:57,623
 What they do is, they put open 
        square bracket.         

1615
01:06:57,625 --> 01:07:00,759
   Then they ask every single   
      thing in the array,       

1616
01:07:00,761 --> 01:07:04,462
  convert yourself to a string  
  'kay, and it puts them here.  

1617
01:07:04,464 --> 01:07:07,298
   Well our op is converting    
     itself to this string.     

1618
01:07:07,300 --> 01:07:10,334
        Enum value 'kay?        

1619
01:07:10,336 --> 01:07:12,670
   That's because the system    
   doesn't really know how to   

1620
01:07:12,672 --> 01:07:14,171
  convert it any other way so   

1621
01:07:14,173 --> 01:07:15,872
   it's just saying that's an   
          enum value.           

1622
01:07:15,874 --> 01:07:18,241
 It doesn't know how to convert 
      itself to a string.       

1623
01:07:18,243 --> 01:07:20,376
 So, you see, see what's going  
            on here?            

1624
01:07:20,378 --> 01:07:24,146
 So, I'm going to show you how  
       to teach a type to       

1625
01:07:24,148 --> 01:07:26,381
   turn itself into a string.   

1626
01:07:26,383 --> 01:07:28,716
    Okay, cuz that's really     
   valuable for debugging and   

1627
01:07:28,718 --> 01:07:30,651
   also might be valuable for   
         your homework.         

1628
01:07:33,756 --> 01:07:35,356
   So, how we gonna do that?    

1629
01:07:35,357 --> 01:07:36,957
 All right, the way you do that 
              is,               

1630
01:07:36,959 --> 01:07:42,595
   you have to add a computed   
     property to your type.     

1631
01:07:42,597 --> 01:07:44,730
  And enums, just like structs  
              and               

1632
01:07:44,732 --> 01:07:47,599
 classes, can have properties,  
             okay?              

1633
01:07:47,601 --> 01:07:50,435
  Only computer properties in   
       enums, structs and       

1634
01:07:50,437 --> 01:07:53,104
  classes can have properties   
        that are values.        

1635
01:07:53,106 --> 01:07:56,240
   Like these, like this over   
        here, all right.        

1636
01:07:56,242 --> 01:07:57,408
 But they can only be computed. 

1637
01:07:57,410 --> 01:08:00,344
    You remember a computer     
 property looks like this, var. 

1638
01:08:00,346 --> 01:08:01,929
        The name of it.         

1639
01:08:01,930 --> 01:08:03,513
      It has to be called       
      description because       

1640
01:08:03,515 --> 01:08:05,081
     it's gonna be a string     
       description of it.       

1641
01:08:05,083 --> 01:08:07,517
   The type has to be string.   

1642
01:08:07,519 --> 01:08:09,418
  It's a string description of  
              it.               

1643
01:08:09,420 --> 01:08:12,588
  And then of course you want   
         your get here.         

1644
01:08:12,590 --> 01:08:18,360
 And, whoops, your get and your 
            set set.            

1645
01:08:18,362 --> 01:08:21,896
  But it has to not only be a   
       computer property.       

1646
01:08:21,898 --> 01:08:24,165
 This description thing to make 
           this work.           

1647
01:08:24,167 --> 01:08:26,900
   It wants to be a read only   
              one.              

1648
01:08:26,902 --> 01:08:28,068
 So we're not going to put the  
              set,              

1649
01:08:28,070 --> 01:08:29,769
 so there will be no set, just  
             a get.             

1650
01:08:30,805 --> 01:08:36,108
 So this get just has to return 
    this op as a string, so     

1651
01:08:36,110 --> 01:08:38,176
 I say someone turned it into a 
            string.             

1652
01:08:38,178 --> 01:08:40,045
 Well how would we turn our op  
         into a string.         

1653
01:08:40,047 --> 01:08:44,749
 Well for the operations we're  
 just gonna return the symbol.  

1654
01:08:44,751 --> 01:08:47,484
     Okay if this is a plus     
     operation turning into     

1655
01:08:47,486 --> 01:08:49,052
    string is I'm just gonna    
         return a plus,         

1656
01:08:49,054 --> 01:08:53,389
 cuz that pretty well describes 
   a plus operation, a plus.    

1657
01:08:53,391 --> 01:08:55,224
        For the operand,        

1658
01:08:55,225 --> 01:08:57,058
  I'm gonna have to turn this   
     double into a string.      

1659
01:08:57,061 --> 01:08:58,627
        And return that.        

1660
01:08:58,629 --> 01:08:59,528
   Okay so how am I gonna do    
             that?              

1661
01:08:59,530 --> 01:09:03,131
    I'm gonna do that using     
            switch,             

1662
01:09:03,133 --> 01:09:05,867
  I need to switch on myself.   

1663
01:09:07,070 --> 01:09:09,837
   Okay cuz I'm gonna do this   
 switch so that I can get these 

1664
01:09:09,839 --> 01:09:12,939
 same things out here, and you  
 do the same thing I did here,  

1665
01:09:12,941 --> 01:09:14,307
   see how I did this switch.   

1666
01:09:14,309 --> 01:09:16,309
      So I could get these      
     associated values out.     

1667
01:09:16,311 --> 01:09:18,177
  I'm gonna do the same thing   
             here.              

1668
01:09:18,179 --> 01:09:20,512
 So how do I switch on my self? 

1669
01:09:20,514 --> 01:09:23,415
       I say switch self.       

1670
01:09:23,417 --> 01:09:24,716
             'Kay?              

1671
01:09:24,718 --> 01:09:28,019
  And then I just have to say   
     the case for operand.      

1672
01:09:28,021 --> 01:09:29,987
    And I'll let that be the    
            operand.            

1673
01:09:29,989 --> 01:09:33,657
 And I have to do the case for  
        unary operation.        

1674
01:09:33,659 --> 01:09:34,624
   Now when I do the case for   

1675
01:09:34,626 --> 01:09:37,493
  unary operation, I want the   
            symbol.             

1676
01:09:37,495 --> 01:09:40,529
   But I don't care about the   
           function.            

1677
01:09:40,531 --> 01:09:42,831
   Cuz I'm not actually gonna   
       compute anything.        

1678
01:09:42,833 --> 01:09:45,500
  I'm just going to return the  
            symbol.             

1679
01:09:45,502 --> 01:09:47,469
  And then for binary options   
             same,              

1680
01:09:47,471 --> 01:09:51,972
  same thing I want the symbol  
     but I don't want this.     

1681
01:09:51,974 --> 01:09:53,307
 So that's the, the don't care. 

1682
01:09:53,309 --> 01:09:55,609
 And what am I gonna do in each 
        of these cases?         

1683
01:09:55,611 --> 01:10:01,080
 Well in the operands case I'm  
   gonna return a string that   

1684
01:10:01,082 --> 01:10:02,848
        is that operand.        

1685
01:10:02,850 --> 01:10:06,251
  Oops, don't like the way it   
     puts that extra thing      

1686
01:10:06,253 --> 01:10:06,985
           on there.            

1687
01:10:06,987 --> 01:10:08,286
             Okay.              

1688
01:10:08,287 --> 01:10:09,586
     And then in the unary      
       operation case I'm       

1689
01:10:09,589 --> 01:10:11,522
 just gonna return the symbol.  

1690
01:10:11,524 --> 01:10:13,390
  And in the binary operation   
       case I'm also just       

1691
01:10:13,392 --> 01:10:14,224
    gonna return the symbol.    

1692
01:10:14,226 --> 01:10:19,329
 And we have, oops, don't want  
     the parentheses there.     

1693
01:10:19,331 --> 01:10:22,965
  Kay and we've covered every   
      case of this switch.      

1694
01:10:22,967 --> 01:10:25,735
 So not only does it know that  
   this switch is covered but   

1695
01:10:25,737 --> 01:10:28,604
 it knows that we for sure have 
   returned something out of    

1696
01:10:28,606 --> 01:10:31,506
 here, because we only have one 
    expression here which is    

1697
01:10:31,508 --> 01:10:34,909
  this Swift and switch and we  
  know that covers every case.  

1698
01:10:34,911 --> 01:10:36,377
 So there goes so we have this  
       nice description.        

1699
01:10:36,379 --> 01:10:40,814
  Now this is not quite enough  
             'kay?              

1700
01:10:40,816 --> 01:10:42,916
   You have to implement this   
           property,            

1701
01:10:42,918 --> 01:10:44,784
     this computer property     
           read-only.           

1702
01:10:44,786 --> 01:10:46,652
 But if you do one other thing, 

1703
01:10:46,654 --> 01:10:50,456
 which is up here, you have to  
     put, colon printable.      

1704
01:10:51,859 --> 01:10:56,961
   Now, I told you enums and    
  structs have no inheritance.  

1705
01:10:56,963 --> 01:10:58,696
  So you're like what, wait a   
         second, there.         

1706
01:10:58,698 --> 01:11:01,098
 You're telling me op inherits  
        from printable?         

1707
01:11:01,100 --> 01:11:04,234
 And the answer is no, does not 
  inherit, okay, it's an enum.  

1708
01:11:04,236 --> 01:11:07,070
      Enums don't have any      
 inheritance, only classes do.  

1709
01:11:07,072 --> 01:11:10,540
   What this colon printable    
         means is, and          

1710
01:11:10,542 --> 01:11:12,842
  this can be true for classes  
    or structs or whatever.     

1711
01:11:12,844 --> 01:11:14,643
  You can put after the colon   
             here.              

1712
01:11:15,713 --> 01:11:17,979
   This is called a protocol.   

1713
01:11:17,981 --> 01:11:21,215
  And all this means is you're  
    telling Swift that this     

1714
01:11:21,217 --> 01:11:24,852
 enum implements whatever is in 
         this protocol.         

1715
01:11:24,854 --> 01:11:28,389
  And this protocol happens to  
      just be one computer      

1716
01:11:28,391 --> 01:11:30,590
  property called Description   
    that returns the string.    

1717
01:11:31,826 --> 01:11:33,326
             Okay?              

1718
01:11:33,327 --> 01:11:34,827
 Now we're going to talk about  
      protocols in depth.       

1719
01:11:34,829 --> 01:11:37,062
   Because protocols are very   
         important for          

1720
01:11:37,064 --> 01:11:40,065
   explaining how things work   
             'kay?              

1721
01:11:40,067 --> 01:11:43,501
  But we're not gonna cover it  
         today, though.         

1722
01:11:43,503 --> 01:11:46,204
  Okay, so if you do those two  
   things, put description in   

1723
01:11:46,206 --> 01:11:52,209
  printable, now when we run,   
  you'll see, I'll go 5 enter.  

1724
01:11:52,211 --> 01:11:54,511
  Six, and you see it's put a   
         five in there.         

1725
01:11:54,513 --> 01:11:55,512
          There's a 6.          

1726
01:11:55,514 --> 01:11:57,447
  Times, it's even putting the  
             times.             

1727
01:11:57,449 --> 01:11:59,915
  If I hit times again, now I   
          get nil and           

1728
01:11:59,917 --> 01:12:03,652
 i tshows me the whole thing is 
        leftover, okay.         

1729
01:12:03,654 --> 01:12:06,454
  Let's go another thing here,  

1730
01:12:06,456 --> 01:12:10,358
 what if I go 6 Enter 5 Enter 4 
             Enter.             

1731
01:12:10,360 --> 01:12:13,661
   Now if I do times it says    
         times of 4 and         

1732
01:12:13,663 --> 01:12:18,098
 5 is 20 with the 6 left over,  
         exactly right.         

1733
01:12:19,134 --> 01:12:22,368
 Kay now notice I had to rerun  
       there to do that,        

1734
01:12:22,370 --> 01:12:24,303
   you're gonna have a clear    
         button right,          

1735
01:12:24,305 --> 01:12:25,571
 that you do in assignment one, 
      you're gonna have to      

1736
01:12:25,573 --> 01:12:27,239
  make that work in assignment  
          two as well.          

1737
01:12:28,308 --> 01:12:31,309
 Okay the last thing really out 
 of time but I'm gonna show you 

1738
01:12:31,311 --> 01:12:34,311
 the last thing really quickly  
   that I was gonna do is use   

1739
01:12:34,313 --> 01:12:38,182
  this description to fix this  
   problem I said right here.   

1740
01:12:38,184 --> 01:12:41,385
    Which is what if I had a    
     function called learn      

1741
01:12:41,387 --> 01:12:45,388
  op 'kay and it took an op as  
       an argument here.        

1742
01:12:45,390 --> 01:12:53,029
 And it just said known ops ops 
  description equals that op.   

1743
01:12:53,031 --> 01:12:59,368
  You see, now these could all  
     just be learn op this.     

1744
01:13:00,404 --> 01:13:03,438
  Okay which is a lot nicer, I  
  only have to type this thing  

1745
01:13:03,440 --> 01:13:05,306
    once, and I just use the    
       description here.        

1746
01:13:05,308 --> 01:13:08,875
  The other thing about this,   
 notice where this function is. 

1747
01:13:08,877 --> 01:13:10,143
        Inside the init.        

1748
01:13:11,246 --> 01:13:12,545
    Okay you are allowed to     

1749
01:13:12,547 --> 01:13:14,513
   put functions inside other   
           functions.           

1750
01:13:14,515 --> 01:13:17,549
 If this is only called inside  
 here, you can put it in here.  

1751
01:13:17,551 --> 01:13:20,518
 If if I put it outside in fact 
  I'd have a little a problem,  

1752
01:13:20,520 --> 01:13:22,387
  because it would have to be   
            private.            

1753
01:13:22,389 --> 01:13:26,390
 Because it uses op, and that's 
 what this error right here is. 

1754
01:13:26,392 --> 01:13:29,460
 All right I'd have say private 
  func, but I don't want to do  

1755
01:13:29,462 --> 01:13:32,462
 private func, instead I'm just 
   gonna put this right down    

1756
01:13:32,464 --> 01:13:35,131
   here, okay and obviously I   
    would do that one last.     

1757
01:13:35,133 --> 01:13:37,333
    Okay that's it, hope you    
       learned a lot and        

1758
01:13:37,335 --> 01:13:40,236
 stuff elsewhere for that and I 
   will see you on Wednesday,   

1759
01:13:40,238 --> 01:13:42,037
      I'm here if you have      
           questions.           

1760
01:13:44,074 --> 01:13:47,976
  For more, please visit us at  
         stanford.edu.          

